openapi: 3.0.0
info:
  contact:
    name: 예시 문서입니다.
  description: 예시 API
  title: Example API
  version: 1.0.0
servers:
- description: 개발용 로컬 서버
  url: http://localhost:8080
- description: 개발용 목 서버
  url: http://localhost:8081
tags:
- description: 예시 관련 API
  name: Example
- description: "컴포넌트 메서드, 클래스와 관련된 메서드"
  name: Component
- description: API 상태 수정 API
  name: ScrudApi
- description: 도식화와 관련된 메서드
  name: Canvas
- description: 프롬프트 채팅 관련 API
  name: Chat
- description: 프로젝트 전역세팅 관련 API
  name: ScrudProject
- description: 게시글 관련 API
  name: Post
- description: 댓글 관련 API
  name: Comment
- description: User 관련 API
  name: User
paths:
  /api/v1/examples/{exampleId}:
    get:
      description: 주어진 ID에 해당하는 예시를 조회합니다. 상세 예시 입니다.
      operationId: getExampleById
      parameters:
      - description: 업데이트할 예시의 ID
        in: path
        name: exampleId
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              examples:
                case1:
                  $ref: '#/components/examples/ExampleDtoCase1'
              schema:
                $ref: '#/components/schemas/ExampleDto'
          description: 조회 성공
        "404":
          content:
            application/json:
              example:
                type: http://localhost:8080/api/v1
                title: 요청한 리소스를 찾을 수 없습니다.
                status: 404
                detail: ID가 '12345'인 API를 데이터베이스에서 찾을 수 없습니다.
                instance: projects/2/apis/12345
                properties:
                  code: API4001
                  isSuccess: "false"
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: 요청한 리소스를 찾을 수 없습니다.
      summary: 특정 ID의 예시를 조회합니다.
      tags:
      - Example
    post:
      description: 주어진 ID에 해당하는 예시를 업데이트합니다. 상세 예시 입니다.
      operationId: updateExampleById
      parameters:
      - description: 업데이트할 예시의 ID
        in: path
        name: exampleId
        required: true
        schema:
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/ExampleRequest'
      responses:
        "200":
          content:
            application/json:
              examples:
                case1:
                  $ref: '#/components/examples/ExampleDtoCase1'
              schema:
                $ref: '#/components/schemas/ExampleDto'
          description: 조회 성공
        "404":
          content:
            application/json:
              example:
                type: http://localhost:8080/api/v1
                title: 요청한 리소스를 찾을 수 없습니다.
                status: 404
                detail: ID가 '12345'인 API를 데이터베이스에서 찾을 수 없습니다.
                instance: projects/2/apis/12345
                properties:
                  code: API4001
                  isSuccess: "false"
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: 요청한 리소스를 찾을 수 없습니다.
      summary: 특정 ID의 예시를 업데이트합니다.
      tags:
      - Example
  /api/v1/examples:
    get:
      description: 예시 목록을 페이지 번호와 페이지 크기를 이용하여 페이지네이션하여 조회합니다.
      operationId: getExamplesWithPagination
      parameters:
      - description: "요청할 페이지 번호 (기본값: 0)"
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: "페이지당 항목 수 (기본값: 10)"
        in: query
        name: size
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            application/json:
              examples:
                case1:
                  $ref: '#/components/examples/ExamplePageDtoCase1'
              schema:
                $ref: '#/components/schemas/ExamplePageDto'
          description: 페이지 조회 성공
        "404":
          content:
            application/json:
              example:
                type: http://localhost:8080/api/v1
                title: 요청한 리소스를 찾을 수 없습니다.
                status: 404
                detail: ID가 '12345'인 API를 데이터베이스에서 찾을 수 없습니다.
                instance: projects/2/apis/12345
                properties:
                  code: API4001
                  isSuccess: "false"
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: 요청한 리소스를 찾을 수 없습니다.
      summary: 예시 목록을 페이지네이션하여 조회합니다.
      tags:
      - Example
      x-spring-paginated: true
    post:
      description: 예시를 하나 생성합니다. 상세 예시 입니다.
      operationId: createExampleOne
      requestBody:
        $ref: '#/components/requestBodies/ExampleRequest'
      responses:
        "200":
          content:
            application/json:
              examples:
                case1:
                  $ref: '#/components/examples/ExampleDtoCase1'
              schema:
                $ref: '#/components/schemas/ExampleDto'
          description: 조회 성공
        "404":
          content:
            application/json:
              example:
                type: http://localhost:8080/api/v1
                title: 요청한 리소스를 찾을 수 없습니다.
                status: 404
                detail: ID가 '12345'인 API를 데이터베이스에서 찾을 수 없습니다.
                instance: projects/2/apis/12345
                properties:
                  code: API4001
                  isSuccess: "false"
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: 요청한 리소스를 찾을 수 없습니다.
      summary: 예시를 하나 생성합니다.
      tags:
      - Example
  /api/v1/projects/{projectId}/apis/{apiId}/chats:
    get:
      description: 특정 API에 대한 프롬프트 채팅 기록을 시간순으로 조회합니다.
      operationId: getPrompts
      parameters:
      - description: 프로젝트 ID
        in: path
        name: projectId
        required: true
        schema:
          type: string
      - description: API ID
        in: path
        name: apiId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                content:
                - chatId: chat-123
                  createdAt: 2025-04-25T10:30:00.123Z
                  userChat:
                    tag: IMPLEMENT
                    promptType: BODY
                    message: 게시글 생성 기능을 구현해주세요.
                    targetMethods:
                    - methodId: method-464
                  systemChat:
                    systemChatId: system-chat-123
                    status: MODIFIED
                    message: "게시글 생성 기능을 추가했습니다. controller, service, repository 관\
                      련 클래스들을 추가 했습니다."
                    diagramId: 507f1f77bcf86cd799439011
                    versionInfo:
                      newVersionId: version-123
                      description: 게시글 생성 기능 구현
                - chatId: chat-124
                  createdAt: 2025-04-25T10:45:30.123Z
                  userChat:
                    tag: IMPLEMENT
                    promptType: BODY
                    message: 게시글 생성 기능의 버그를 고쳐주세요
                    targetMethods:
                    - methodId: method-462
                  systemChat:
                    systemChatId: system-chat-124
                    diagramId: 507f1f77bcf86cd799439011
                    message: 게시글 생성 버그를 수정했습니다. service 코드의 오류가 수정되었습니다.
                    status: MODIFIED
                    versionInfo:
                      newVersionId: version-124
                      description: 게시글 생성 버그 수정
              schema:
                $ref: '#/components/schemas/ChatHistoryResponse'
          description: 프롬프트 채팅 기록 조회 결과
        "404":
          content:
            application/json:
              example:
                type: http://localhost:8080/api/v1
                title: 요청한 리소스를 찾을 수 없습니다.
                status: 404
                detail: ID가 '12345'인 API를 데이터베이스에서 찾을 수 없습니다.
                instance: projects/2/apis/12345
                properties:
                  code: API4001
                  isSuccess: "false"
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: 요청한 리소스를 찾을 수 없습니다.
      summary: 프롬프트 채팅 기록 조회
      tags:
      - Chat
    post:
      description: |
        프롬프트를 입력하여 도식화 수정을 요청하거나 설명을 요청합니다. 응답 값으로 SSE Id를 받습니다.
        Id 값을 /api/sse/connect/{SSEId} API에 입력하여 값을 얻을 수 있습니다.
      operationId: promptChat
      parameters:
      - description: 프로젝트 ID
        in: path
        name: projectId
        required: true
        schema:
          type: string
      - description: API ID
        in: path
        name: apiId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              예시1:
                $ref: '#/components/examples/UserChatRequestExample'
            schema:
              $ref: '#/components/schemas/UserChatRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                streamId: f99b4e6c-2c75-4868-bc05-cac827523207
              schema:
                $ref: '#/components/schemas/SSEIdResponse'
          description: 프롬프트 처리 결과
        "404":
          content:
            application/json:
              example:
                type: http://localhost:8080/api/v1
                title: 요청한 리소스를 찾을 수 없습니다.
                status: 404
                detail: ID가 '12345'인 API를 데이터베이스에서 찾을 수 없습니다.
                instance: projects/2/apis/12345
                properties:
                  code: API4001
                  isSuccess: "false"
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: 요청한 리소스를 찾을 수 없습니다.
      summary: SSE 기반프롬프트 채팅 요청
      tags:
      - Chat
  /api/v1/sse/connect/{SSEId}:
    get:
      description: 서버와 클라이언트 간의 SSE 연결을 설정하여 실시간 이벤트 스트림을 수신할 수 있습니다.
      operationId: connectSSE
      parameters:
      - description: SSE Id 입니다
        in: path
        name: SSEId
        required: true
        schema:
          example: f99b4e6c-2c75-4868-bc05-cac827523207
          type: string
      responses:
        "200":
          content:
            text/event-stream:
              example: "{value=data: {'token': '합니다'}}"
              schema:
                description: 이벤트 스트림
                example: "data: {'token': '합니다'}"
                type: string
          description: SSE 연결 성공
        "401":
          description: 인증되지 않은 요청
      security:
      - bearerAuth: []
      summary: SSE 연결을 설정합니다.
      tags:
      - Chat
  /api/v1/projects/{projectId}/apis/{apiId}/components/{componentId}/position:
    put:
      description: 도식화에서 특정 컴포넌트의 위치 좌표를 변경합니다.
      operationId: updateComponentPosition
      parameters:
      - description: 프로젝트 ID
        in: path
        name: projectId
        required: true
        schema:
          type: string
      - description: API ID
        in: path
        name: apiId
        required: true
        schema:
          type: string
      - description: 위치를 변경할 컴포넌트 ID
        in: path
        name: componentId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              example1:
                $ref: '#/components/examples/ComponentPositionUpdateRequestExample'
            schema:
              $ref: '#/components/schemas/ComponentPositionUpdateRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                componentId: component-123
                type: CLASS
                name: BoardController
                description: 게시판 컨트롤러 클래스
                positionX: 250.5
                positionY: 150.75
                methods:
                - methodId: method-456
                  name: getAllPosts
                  signature: public ResponseEntity<PageDto<PostDto>> getAllPosts(Pageable
                    pageable)
                  body: |-
                    @GetMapping
                    public ResponseEntity<PageDto<PostDto>> getAllPosts(Pageable pageable) {
                        return ResponseEntity.ok(boardService.getAllPosts(pageable));
                    }
                  description: 모든 게시글을 페이징하여 조회합니다.
                - methodId: method-457
                  name: getPostById
                  signature: public ResponseEntity<PostDto> getPostById(Long postId)
                  body: |-
                    @GetMapping("/{postId}")
                    public ResponseEntity<PostDto> getPostById(@PathVariable Long postId) {
                        return ResponseEntity.ok(boardService.getPostById(postId));
                    }
                  description: 특정 ID의 게시글을 조회합니다.
              schema:
                $ref: '#/components/schemas/ComponentUpdatedResponse'
          description: 컴포넌트 위치 업데이트 성공
        "404":
          content:
            application/json:
              example:
                type: http://localhost:8080/api/v1
                title: 요청한 리소스를 찾을 수 없습니다.
                status: 404
                detail: ID가 '12345'인 API를 데이터베이스에서 찾을 수 없습니다.
                instance: projects/2/apis/12345
                properties:
                  code: API4001
                  isSuccess: "false"
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: 요청한 리소스를 찾을 수 없습니다.
      summary: 컴포넌트의 위치를 업데이트합니다.
      tags:
      - Component
  /api/v1/projects/{projectId}/apis:
    get:
      description: "parameter에 API의 상태(AI_GENERATED 등) 을 검색할 수 있습니다. \n수정된 날자순으로 정\
        렬되어 출력됩니다.\n"
      operationId: searchApiStatus
      parameters:
      - description: 프로젝트 ID
        in: path
        name: projectId
        required: true
        schema:
          type: string
      - description: "포함, 배열 지원"
        in: query
        name: include
        required: false
        schema:
          items:
            $ref: '#/components/schemas/ApiProcessStateEnumDto'
          type: array
      responses:
        "200":
          content:
            application/json:
              example:
                content:
                - apiId: api-123
                  name: 게시판 생성
                  description: 게시판 생성 API
                  method: POST
                  endpoint: /api/v1/boards
                  status: AI_VISUALIZED
                - apiId: api-124
                  name: 게시판 삭제
                  description: 게시판 삭제 API
                  method: DELETE
                  endpoint: /api/v1/boards
                  status: AI_VISUALIZED
                - apiId: api-125
                  name: 댓글 생성
                  description: 댓글 생성 API
                  method: POST
                  endpoint: "/api/v1/boards/{boardId}/comments/{commentId}"
                  status: AI_VISUALIZED
                listSize: 3
                isFirstPage: true
                isLastPage: true
                totalPages: 1
                totalElements: 3
              schema:
                $ref: '#/components/schemas/ApiSummaryPageResponse'
          description: API 상태가 AI_VISUALIZED 인 목록 조회 성공
      summary: "API 상태(USER_COMPLETED, AI_GENERATED 등)에 대해 검색합니다."
      tags:
      - ScrudApi
  /api/v1/projects/{projectId}/apis/{apiId}/versions/{versionId}:
    get:
      description: 특정 프로젝트의 특정 API 버전에 대한 메서드 도식화 데이터를 가져옵니다.
      operationId: getDiagram
      parameters:
      - description: 프로젝트 ID
        in: path
        name: projectId
        required: true
        schema:
          type: string
      - description: API ID
        in: path
        name: apiId
        required: true
        schema:
          type: string
      - description: 버전 ID
        in: path
        name: versionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                diagramId: diagram-123
                components:
                - componentId: component-123
                  type: CLASS
                  name: BoardController
                  description: 게시판 컨트롤러 클래스
                  positionX: 250.5
                  positionY: 150.75
                  methods:
                  - methodId: method-456
                    name: getAllPosts
                    signature: public ResponseEntity<PageDto<PostDto>> getAllPosts(Pageable
                      pageable)
                    body: |-
                      @GetMapping
                      public ResponseEntity<PageDto<PostDto>> getAllPosts(Pageable pageable) {
                          return ResponseEntity.ok(boardService.getAllPosts(pageable));
                      }
                    description: 모든 게시글을 페이징하여 조회합니다.
                  - methodId: method-457
                    name: getPostById
                    signature: public ResponseEntity<PostDto> getPostById(Long postId)
                    body: |-
                      @GetMapping("/{postId}")
                      public ResponseEntity<PostDto> getPostById(@PathVariable Long postId) {
                          return ResponseEntity.ok(boardService.getPostById(postId));
                      }
                    description: 특정 ID의 게시글을 조회합니다.
                - componentId: component-124
                  type: CLASS
                  name: BoardService
                  description: 게시판 서비스 클래스
                  positionX: 450.0
                  positionY: 150.0
                  methods:
                  - methodId: method-458
                    name: getAllPosts
                    signature: public PageDto<PostDto> getAllPosts(Pageable pageable)
                    body: "public PageDto<PostDto> getAllPosts(Pageable pageable)\
                      \ {\n    Page<Post> postsPage = postRepository.findAll(pageable);\n\
                      \    List<PostDto> postDtos = postsPage.getContent().stream()\n\
                      \        .map(this::convertToDto)\n        .collect(Collectors.toList());\n\
                      \    \n    return new PageDto<>(postDtos, postsPage.getNumber(),\
                      \ postsPage.isFirst(), postsPage.isLast(), \n        postsPage.getTotalPages(),\
                      \ postsPage.getTotalElements());\n}"
                    description: 모든 게시글을 페이징하여 조회합니다.
                  - methodId: method-459
                    name: getPostById
                    signature: public PostDto getPostById(Long postId)
                    body: |-
                      public PostDto getPostById(Long postId) {
                          Post post = postRepository.findById(postId)
                              .orElseThrow(() -> new NotFoundException("Post not found with id: " + postId));
                          return convertToDto(post);
                      }
                    description: 특정 ID의 게시글을 조회합니다.
                - componentId: component-125
                  type: INTERFACE
                  name: PostRepository
                  description: 게시글 저장소 인터페이스
                  positionX: 650.0
                  positionY: 150.0
                  methods:
                  - methodId: method-460
                    name: findAll
                    signature: Page<Post> findAll(Pageable pageable)
                    description: 모든 게시글을 페이징하여 조회합니다.
                  - methodId: method-461
                    name: findById
                    signature: Optional<Post> findById(Long id)
                    description: ID로 게시글을 조회합니다.
                connections:
                - connectionId: connection-123
                  sourceMethodId: method-456
                  targetMethodId: method-458
                  type: SOLID
                - connectionId: connection-124
                  sourceMethodId: method-457
                  targetMethodId: method-459
                  type: SOLID
                - connectionId: connection-125
                  sourceMethodId: method-458
                  targetMethodId: method-460
                  type: DOTTED
                - connectionId: connection-126
                  sourceMethodId: method-459
                  targetMethodId: method-461
                  type: DOTTED
                dto:
                - dtoId: dto-123
                  name: PostDto
                  description: 게시글 DTO
                  body: "public class PostDto {\n    private Long id;\n    private\
                    \ String title;\n    private String content;\n    private String\
                    \ author;\n    private LocalDateTime createdAt;\n    private LocalDateTime\
                    \ updatedAt;\n    \n    // getters and setters\n}"
                - dtoId: dto-124
                  name: PageDto
                  description: 페이지 DTO
                  body: "public class PageDto<T> {\n    private List<T> content;\n\
                    \    private int listSize;\n    private boolean isFirstPage;\n\
                    \    private boolean isLastPage;\n    private int totalPages;\n\
                    \    private long totalElements;\n    \n    // constructors, getters\
                    \ and setters\n}"
                metadata:
                  metadataId: metadata-123
                  version: 2
                  lastModified: 2025-04-25T10:30:45.123Z
                  name: 게시판 API
                  description: 게시판 서비스를 위한 CRUD API 모음
              schema:
                $ref: '#/components/schemas/DiagramResponse'
          description: 성공적으로 도식화 데이터를 조회함
        "404":
          content:
            application/json:
              example:
                type: http://localhost:8080/api/v1
                title: 요청한 리소스를 찾을 수 없습니다.
                status: 404
                detail: ID가 '12345'인 API를 데이터베이스에서 찾을 수 없습니다.
                instance: projects/2/apis/12345
                properties:
                  code: API4001
                  isSuccess: "false"
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: 요청한 리소스를 찾을 수 없습니다.
      summary: 특정 버전의 도식화 데이터 조회
      tags:
      - Canvas
  /api/v1/projects/{projectId}/apis/{apiId}/status:
    put:
      description: API 처리 상태를 변경합니다.
      operationId: changeApiProcessStatus
      parameters:
      - description: 프로젝트 ID
        in: path
        name: projectId
        required: true
        schema:
          type: string
      - description: API ID
        in: path
        name: apiId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            examples:
              example1:
                $ref: '#/components/examples/ApiProcessStateRequestExample'
            schema:
              $ref: '#/components/schemas/ApiProcessStateRequest'
        description: 처리상태
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                status: USER_COMPLETED
              schema:
                $ref: '#/components/schemas/ApiProcessStateUpdatedResponse'
          description: 프롬프트 처리 결과
      summary: API 처리 상태를 변경합니다.
      tags:
      - ScrudApi
  /api/v1/projects/{projectId}/apis/{apiId}/diagrams:
    post:
      description: 도식화를 처음 실행할 때 사용하는 API 입니다.
      operationId: createDiagram
      parameters:
      - description: 프로젝트 ID
        in: path
        name: projectId
        required: true
        schema:
          type: string
      - description: API ID
        in: path
        name: apiId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                diagramId: diagram-123
                components:
                - componentId: component-123
                  type: CLASS
                  name: BoardController
                  description: 게시판 컨트롤러 클래스
                  positionX: 250.5
                  positionY: 150.75
                  methods:
                  - methodId: method-456
                    name: getAllPosts
                    signature: public ResponseEntity<PageDto<PostDto>> getAllPosts(Pageable
                      pageable)
                    body: |-
                      @GetMapping
                      public ResponseEntity<PageDto<PostDto>> getAllPosts(Pageable pageable) {
                          return ResponseEntity.ok(boardService.getAllPosts(pageable));
                      }
                    description: 모든 게시글을 페이징하여 조회합니다.
                  - methodId: method-457
                    name: getPostById
                    signature: public ResponseEntity<PostDto> getPostById(Long postId)
                    body: |-
                      @GetMapping("/{postId}")
                      public ResponseEntity<PostDto> getPostById(@PathVariable Long postId) {
                          return ResponseEntity.ok(boardService.getPostById(postId));
                      }
                    description: 특정 ID의 게시글을 조회합니다.
                - componentId: component-124
                  type: CLASS
                  name: BoardService
                  description: 게시판 서비스 클래스
                  positionX: 450.0
                  positionY: 150.0
                  methods:
                  - methodId: method-458
                    name: getAllPosts
                    signature: public PageDto<PostDto> getAllPosts(Pageable pageable)
                    body: "public PageDto<PostDto> getAllPosts(Pageable pageable)\
                      \ {\n    Page<Post> postsPage = postRepository.findAll(pageable);\n\
                      \    List<PostDto> postDtos = postsPage.getContent().stream()\n\
                      \        .map(this::convertToDto)\n        .collect(Collectors.toList());\n\
                      \    \n    return new PageDto<>(postDtos, postsPage.getNumber(),\
                      \ postsPage.isFirst(), postsPage.isLast(), \n        postsPage.getTotalPages(),\
                      \ postsPage.getTotalElements());\n}"
                    description: 모든 게시글을 페이징하여 조회합니다.
                  - methodId: method-459
                    name: getPostById
                    signature: public PostDto getPostById(Long postId)
                    body: |-
                      public PostDto getPostById(Long postId) {
                          Post post = postRepository.findById(postId)
                              .orElseThrow(() -> new NotFoundException("Post not found with id: " + postId));
                          return convertToDto(post);
                      }
                    description: 특정 ID의 게시글을 조회합니다.
                - componentId: component-125
                  type: INTERFACE
                  name: PostRepository
                  description: 게시글 저장소 인터페이스
                  positionX: 650.0
                  positionY: 150.0
                  methods:
                  - methodId: method-460
                    name: findAll
                    signature: Page<Post> findAll(Pageable pageable)
                    description: 모든 게시글을 페이징하여 조회합니다.
                  - methodId: method-461
                    name: findById
                    signature: Optional<Post> findById(Long id)
                    description: ID로 게시글을 조회합니다.
                connections:
                - connectionId: connection-123
                  sourceMethodId: method-456
                  targetMethodId: method-458
                  type: SOLID
                - connectionId: connection-124
                  sourceMethodId: method-457
                  targetMethodId: method-459
                  type: SOLID
                - connectionId: connection-125
                  sourceMethodId: method-458
                  targetMethodId: method-460
                  type: DOTTED
                - connectionId: connection-126
                  sourceMethodId: method-459
                  targetMethodId: method-461
                  type: DOTTED
                dto:
                - dtoId: dto-123
                  name: PostDto
                  description: 게시글 DTO
                  body: "public class PostDto {\n    private Long id;\n    private\
                    \ String title;\n    private String content;\n    private String\
                    \ author;\n    private LocalDateTime createdAt;\n    private LocalDateTime\
                    \ updatedAt;\n    \n    // getters and setters\n}"
                - dtoId: dto-124
                  name: PageDto
                  description: 페이지 DTO
                  body: "public class PageDto<T> {\n    private List<T> content;\n\
                    \    private int listSize;\n    private boolean isFirstPage;\n\
                    \    private boolean isLastPage;\n    private int totalPages;\n\
                    \    private long totalElements;\n    \n    // constructors, getters\
                    \ and setters\n}"
                metadata:
                  metadataId: metadata-123
                  version: 2
                  lastModified: 2025-04-25T10:30:45.123Z
                  name: 게시판 API
                  description: 게시판 서비스를 위한 CRUD API 모음
              schema:
                $ref: '#/components/schemas/DiagramResponse'
          description: 성공적으로 도식화 데이터를 조회함
      summary: API를 최초로 도식화 할 때 사용합니다.
      tags:
      - Canvas
  /api/v1/rules:
    get:
      description: "입력값의 타입, 필수 여부, 제약 조건 등을 설정하는 룰 정보를 조회합니다."
      operationId: getRules
      responses:
        "200":
          content:
            application/json:
              examples:
                example1:
                  $ref: '#/components/examples/RuleResponseExample'
              schema:
                $ref: '#/components/schemas/RuleResponse'
          description: 룰 목록 조회 성공
      summary: 사용 가능한 룰 목록 조회
      tags:
      - Rule
  /api/v1/api-specs/by-project/{scrudProjectId}:
    get:
      description: 중간 매핑을 통해 ScrudProject ID로 연결된 모든 API 스펙 버전을 조회합니다.
      operationId: getApiSpecsByScrudProjectId
      parameters:
      - description: Scrud 프로젝트 ID
        explode: false
        in: path
        name: scrudProjectId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpecListResponse'
          description: API 스펙 목록 조회 성공
      summary: Scrud 프로젝트 ID로 API 스펙 버전 목록 조회
      tags:
      - ApiSpec
  /api/v1/api-specs/{apiSpecVersionId}:
    delete:
      description: 단일 API 스펙과 관련 필드를 삭제합니다.
      operationId: deleteApiSpec
      parameters:
      - explode: false
        in: path
        name: apiSpecVersionId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: 성공적으로 처리되었습니다
      summary: API 스펙 삭제
      tags:
      - ApiSpec
    get:
      description: 단일 API 스펙과 관련 필드를 조회합니다.
      operationId: getApiSpecById
      parameters:
      - explode: false
        in: path
        name: apiSpecVersionId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpecVersionResponse'
          description: 단일 API 스펙 조회 성공
      summary: API 스펙 상세 조회
      tags:
      - ApiSpec
    put:
      description: 단일 API 스펙과 필드를 전체 수정합니다.
      operationId: updateApiSpec
      parameters:
      - explode: false
        in: path
        name: apiSpecVersionId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ApiSpecUpdateRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpecVersionResponse'
          description: API 스펙 수정 성공
      summary: API 스펙 수정
      tags:
      - ApiSpec
  /api/v1/api-specs:
    post:
      description: 새로운 API 스펙과 필드를 등록합니다.
      operationId: createApiSpec
      requestBody:
        $ref: '#/components/requestBodies/ApiSpecCreateRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpecVersionCreatedResponse'
          description: API 스펙 생성 성공
      summary: API 스펙 생성
      tags:
      - ApiSpec
  /api/v1/api-specs/api/{apiSpecId}:
    patch:
      description: API status 상태를 수정합니다.
      operationId: updateApiSpecStatus
      parameters:
      - explode: false
        in: path
        name: apiSpecId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ApiSpecStatusRequest'
      responses:
        "200":
          description: 성공적으로 처리되었습니다
      summary: API 스펙 status 수정
      tags:
      - ApiSpec
  /api/v1/projects:
    get:
      operationId: getAllProjects
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScrudProjectPageDto'
          description: 프로젝트 목록
        "404":
          content:
            application/json:
              example:
                type: http://localhost:8080/api/v1
                title: 요청한 리소스를 찾을 수 없습니다.
                status: 404
                detail: ID가 '12345'인 API를 데이터베이스에서 찾을 수 없습니다.
                instance: projects/2/apis/12345
                properties:
                  code: API4001
                  isSuccess: "false"
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: 요청한 리소스를 찾을 수 없습니다.
      summary: 프로젝트 전체 목록 조회
      tags:
      - ScrudProject
      x-spring-paginated: true
    patch:
      description: "프로젝트 제목, 설명, 서버url 수정"
      operationId: updateScrudProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScrudProjectDto'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScrudProjectDto'
          description: 프로젝트 설정
      tags:
      - ScrudProject
    post:
      description: "프로젝트 생성 API. 전역 파일 추가 주의사항! 아키텍처 구조도는 사용자 선택일 경우 ARCHITECTURE_DEFAULT,\
        \ 깃허브 연동해서 올리는 경우엔 ARCHITECTURE_GITHUB 로 부탁해요! 그리고 fileContent: JSON.stringify(fileContent)\
        \ 이렇게 직렬화해서 보내주세요!"
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: ProjectId 반환
      summary: 프로젝트 생성
      tags:
      - ScrudProject
  /api/v1/projects/{projectId}:
    delete:
      description: 프로젝트 삭제
      operationId: deleteProject
      parameters:
      - description: 프로젝트 ID
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: 성공적으로 처리되었습니다
      tags:
      - ScrudProject
    get:
      operationId: getAllGlobalFile
      parameters:
      - description: 프로젝트 ID
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalFileListDto'
          description: 전체 전역설정 파일 목록
        "404":
          content:
            application/json:
              example:
                type: http://localhost:8080/api/v1
                title: 요청한 리소스를 찾을 수 없습니다.
                status: 404
                detail: ID가 '12345'인 API를 데이터베이스에서 찾을 수 없습니다.
                instance: projects/2/apis/12345
                properties:
                  code: API4001
                  isSuccess: "false"
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: 요청한 리소스를 찾을 수 없습니다.
      tags:
      - ScrudProject
    put:
      description: "전역 파일 추가 - 아키텍처 구조도는 사용자 선택일 경우 ARCHITECTURE_DEFAULT, 깃허브 연동해서\
        \ 올리는 경우엔 ARCHITECTURE_GITHUB 로 부탁해요! 그리고 fileContent: JSON.stringify(fileContent)\
        \ 이렇게 직렬화해서 보내주세요!"
      operationId: addGlobalFile
      parameters:
      - description: 프로젝트 ID
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalFileDto'
      responses:
        "204":
          description: 성공적으로 처리되었습니다
      tags:
      - ScrudProject
  /api/v1/projects/{projectId}/{globalFileId}:
    delete:
      description: 전역 파일 삭제
      operationId: deleteGlobalFile
      parameters:
      - description: 프로젝트 ID
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: 전역 파일 ID
        explode: false
        in: path
        name: globalFileId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: 성공적으로 처리되었습니다
      tags:
      - ScrudProject
  /api/v1/posts:
    get:
      operationId: getPostList
      parameters:
      - description: "요청할 페이지 번호 (기본값: 0)"
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: "페이지당 항목 수 (기본값: 10)"
        in: query
        name: size
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 1
          type: integer
      - description: 정렬 기준 필드
        in: query
        name: sort
        required: false
        schema:
          $ref: '#/components/schemas/PostSortEnumDto'
      - description: 정렬 방향
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/PostOrderEnumDto'
      - description: 검색 키워드
        in: query
        name: keyword
        required: false
        schema:
          type: string
      - description: 검색 대상 필드
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/SearchTypeEnumDto'
      - description: 카테고리 ID
        in: query
        name: categoryId
        required: false
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostListResponse'
          description: 게시글 목록 조회 응답
      summary: 게시글 목록 조회
      tags:
      - Post
    post:
      operationId: createPost
      requestBody:
        $ref: '#/components/requestBodies/CreatePostRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePostResponse'
          description: 게시글 생성 성공 응답
      summary: 게시글 작성
      tags:
      - Post
  /api/v1/posts/{postId}:
    delete:
      operationId: deletePost
      parameters:
      - in: path
        name: postId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          description: 성공적으로 처리되었습니다
      summary: 게시글 삭제
      tags:
      - Post
    get:
      operationId: getPostById
      parameters:
      - in: path
        name: postId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetailResponse'
          description: 게시글 상세 조회 응답
      summary: 게시글 상세 조회
      tags:
      - Post
    patch:
      operationId: updatePost
      parameters:
      - in: path
        name: postId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/UpdatePostRequest'
      responses:
        "200":
          description: 성공적으로 처리되었습니다
      summary: 게시글 수정
      tags:
      - Post
  /api/v1/posts/{postId}/vote:
    post:
      operationId: votePost
      parameters:
      - in: path
        name: postId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/PostVoteRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteResponse'
          description: 게시글 추천/비추천 응답
      summary: 게시글 추천/비추천
      tags:
      - Post
  /api/v1/posts/{postId}/comments:
    get:
      operationId: getCommentList
      parameters:
      - in: path
        name: postId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentListResponse'
          description: 댓글 목록 조회 성공
      summary: 댓글 조회
      tags:
      - Comment
    post:
      operationId: createComment
      parameters:
      - in: path
        name: postId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/CreateCommentRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
          description: 댓글 작성 성공
      summary: 댓글 작성
      tags:
      - Comment
  /api/v1/comments/{commentId}:
    delete:
      operationId: deleteComment
      parameters:
      - in: path
        name: commentId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "204":
          description: 성공적으로 처리되었습니다
      summary: 댓글 삭제
      tags:
      - Comment
    patch:
      operationId: updateComment
      parameters:
      - in: path
        name: commentId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/UpdateCommentRequest'
      responses:
        "200":
          description: 성공적으로 처리되었습니다
      summary: 댓글 수정
      tags:
      - Comment
  /api/v1/comments/{commentId}/vote:
    post:
      operationId: voteComment
      parameters:
      - in: path
        name: commentId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        $ref: '#/components/requestBodies/CommentVoteRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteCommentResponse'
          description: 댓글 추천/비추천 성공
      summary: 댓글 추천/비추천
      tags:
      - Comment
  /api/v1/OpenAI:
    patch:
      operationId: updateOpenAIAPiKey
      requestBody:
        content:
          application/json:
            schema:
              properties:
                openAIApiKey:
                  type: string
              type: string
      responses:
        "200":
          description: 성공적으로 처리되었습니다
      summary: 사용자 OpenAI Key 받아오기
      tags:
      - User
  /api/v1/users/me:
    get:
      operationId: getCurrentUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: 사용자 정보
      summary: 현재 로그인한 사용자의 정보를 조회합니다.
      tags:
      - User
components:
  examples:
    ExampleDtoCase1:
      summary: 기본 예시 데이터
      value:
        exampleEnum: ONE
        exampleString: "안녕하세요, 첫 번째 예시입니다."
        exampleInteger: 42
        exampleBoolean: true
        exampleArray:
        - 사과
        - 바나나
        - 오렌지
        exampleObject:
          nestedProperty: 첫 번째 중첩 데이터
        exampleDate: 2025-04-25
    ExamplePageDtoCase1:
      summary: 페이지 정보 예시 데이터
      value:
        listSize: 4
        isFirstPage: false
        isLastPage: false
        totalPages: 15
        totalElements: 59
        content:
        - exampleEnum: THREE
          exampleString: "반갑습니다, 두 번째 예시입니다."
          exampleInteger: 99
          exampleBoolean: false
          exampleArray:
          - 자바
          - 파이썬
          - 자바스크립트
          - 코틀린
          exampleObject:
            nestedProperty: 두 번째 중첩 데이터
          exampleDate: 2025-05-10
        - exampleEnum: ONE
          exampleString: "안녕하세요, 첫 번째 항목입니다."
          exampleInteger: 42
          exampleBoolean: true
          exampleArray:
          - 스프링
          - NodeJS
          - React
          - Vue
          exampleObject:
            nestedProperty: 첫 번째 중첩 데이터
          exampleDate: 2025-04-15
        - exampleEnum: TWO
          exampleString: 세 번째 데이터 항목입니다.
          exampleInteger: 123
          exampleBoolean: false
          exampleArray:
          - C#
          - Go
          - Rust
          - PHP
          exampleObject:
            nestedProperty: 세 번째 중첩 데이터
          exampleDate: 2025-06-20
        - exampleEnum: FOUR
          exampleString: 네 번째이자 마지막 항목입니다.
          exampleInteger: 777
          exampleBoolean: true
          exampleArray:
          - Swift
          - Kotlin
          - Flutter
          - React Native
          exampleObject:
            nestedProperty: 네 번째 중첩 데이터
          exampleDate: 2025-07-05
    UserChatRequestExample:
      summary: 사용자 채팅 요청 예시
      value:
        tag: IMPLEMENT
        promptType: BODY
        message: 게시글 삭제 기능을 구현해주세요.
        targetMethods:
        - methodId: method-463
    ComponentPositionUpdateRequestExample:
      summary: 컴포넌트 위치 업데이트 요청 예시
      value:
        x: 250.5
        "y": 150.75
    ApiProcessStateRequestExample:
      summary: API 처리 상태 변경 요청 예시
      value:
        status: USER_COMPLETED
    RuleResponseExample:
      description: 룰 목록 조회 성공
    ExampleDtoCase2:
      summary: 대체 예시 데이터
      value:
        exampleEnum: THREE
        exampleString: "반갑습니다, 두 번째 예시입니다."
        exampleInteger: 99
        exampleBoolean: false
        exampleArray:
        - 자바
        - 파이썬
        - 자바스크립트
        - 코틀린
        exampleObject:
          nestedProperty: 두 번째 중첩 데이터
        exampleDate: 2025-05-10
  parameters:
    ExampleId:
      description: 업데이트할 예시의 ID
      in: path
      name: exampleId
      required: true
      schema:
        type: integer
    Page:
      description: "요청할 페이지 번호 (기본값: 0)"
      in: query
      name: page
      required: false
      schema:
        default: 0
        minimum: 0
        type: integer
    Size:
      description: "페이지당 항목 수 (기본값: 10)"
      in: query
      name: size
      required: false
      schema:
        default: 10
        maximum: 100
        minimum: 1
        type: integer
    ProjectId:
      description: 프로젝트 ID
      in: path
      name: projectId
      required: true
      schema:
        type: string
    ApiId:
      description: API ID
      in: path
      name: apiId
      required: true
      schema:
        type: string
    SSEId:
      description: SSE Id 입니다
      in: path
      name: SSEId
      required: true
      schema:
        example: f99b4e6c-2c75-4868-bc05-cac827523207
        type: string
    ComponentId:
      description: 위치를 변경할 컴포넌트 ID
      in: path
      name: componentId
      required: true
      schema:
        type: string
    Include:
      description: "포함, 배열 지원"
      in: query
      name: include
      required: false
      schema:
        items:
          $ref: '#/components/schemas/ApiProcessStateEnumDto'
        type: array
    VersionId:
      description: 버전 ID
      in: path
      name: versionId
      required: true
      schema:
        type: string
    PostSort:
      description: 정렬 기준 필드
      in: query
      name: sort
      required: false
      schema:
        $ref: '#/components/schemas/PostSortEnumDto'
    PostOrder:
      description: 정렬 방향
      in: query
      name: order
      required: false
      schema:
        $ref: '#/components/schemas/PostOrderEnumDto'
    SearchPostParam:
      description: 검색 키워드
      in: query
      name: keyword
      required: false
      schema:
        type: string
    SearchTypeParam:
      description: 검색 대상 필드
      in: query
      name: type
      required: false
      schema:
        $ref: '#/components/schemas/SearchTypeEnumDto'
    CategoryIdParam:
      description: 카테고리 ID
      in: query
      name: categoryId
      required: false
      schema:
        format: int64
        type: integer
    PostId:
      in: path
      name: postId
      required: true
      schema:
        format: int64
        type: integer
    CommentId:
      in: path
      name: commentId
      required: true
      schema:
        format: int64
        type: integer
  requestBodies:
    ExampleRequest:
      content:
        application/json:
          examples:
            case1:
              $ref: '#/components/examples/ExampleDtoCase1'
            case2:
              $ref: '#/components/examples/ExampleDtoCase2'
          schema:
            $ref: '#/components/schemas/ExampleDto'
      description: 예시 업데이트 입력값입니다.
      required: true
    ApiSpecUpdateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiSpecVersionUpdateRequest'
      description: 단일 API 스펙과 필드를 전체 생성합니다.
      required: true
    ApiSpecCreateRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiSpecVersionCreateRequest'
      description: 단일 API 스펙과 필드를 전체 생성합니다.
      required: true
    ApiSpecStatusRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiSpecVersionStatusRequest'
      description: API 스펙 상태 변경
      required: true
    CreatePostRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatePostRequest'
      description: 게시글을 작성합니다.
      required: true
    UpdatePostRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdatePostRequest'
      description: 게시글을 수정합니다.
      required: true
    PostVoteRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostVoteRequest'
      description: 게시글 추천/비추천 요청입니다.
      required: true
    CreateCommentRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCommentRequest'
      description: 댓글 작성 요청
      required: true
    UpdateCommentRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateCommentRequest'
      description: 댓글을 수정합니다.
      required: true
    CommentVoteRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommentVoteRequest'
      description: 댓글 추천/비추천 요청입니다.
      required: true
  responses:
    ExampleResponse:
      content:
        application/json:
          examples:
            case1:
              $ref: '#/components/examples/ExampleDtoCase1'
          schema:
            $ref: '#/components/schemas/ExampleDto'
      description: 조회 성공
    NotFoundException:
      content:
        application/json:
          example:
            type: http://localhost:8080/api/v1
            title: 요청한 리소스를 찾을 수 없습니다.
            status: 404
            detail: ID가 '12345'인 API를 데이터베이스에서 찾을 수 없습니다.
            instance: projects/2/apis/12345
            properties:
              code: API4001
              isSuccess: "false"
          schema:
            $ref: '#/components/schemas/NotFoundException'
      description: 요청한 리소스를 찾을 수 없습니다.
    ExamplePageResponse:
      content:
        application/json:
          examples:
            case1:
              $ref: '#/components/examples/ExamplePageDtoCase1'
          schema:
            $ref: '#/components/schemas/ExamplePageDto'
      description: 페이지 조회 성공
    GetPromptsResponse:
      content:
        application/json:
          example:
            content:
            - chatId: chat-123
              createdAt: 2025-04-25T10:30:00.123Z
              userChat:
                tag: IMPLEMENT
                promptType: BODY
                message: 게시글 생성 기능을 구현해주세요.
                targetMethods:
                - methodId: method-464
              systemChat:
                systemChatId: system-chat-123
                status: MODIFIED
                message: "게시글 생성 기능을 추가했습니다. controller, service, repository 관련 클래\
                  스들을 추가 했습니다."
                diagramId: 507f1f77bcf86cd799439011
                versionInfo:
                  newVersionId: version-123
                  description: 게시글 생성 기능 구현
            - chatId: chat-124
              createdAt: 2025-04-25T10:45:30.123Z
              userChat:
                tag: IMPLEMENT
                promptType: BODY
                message: 게시글 생성 기능의 버그를 고쳐주세요
                targetMethods:
                - methodId: method-462
              systemChat:
                systemChatId: system-chat-124
                diagramId: 507f1f77bcf86cd799439011
                message: 게시글 생성 버그를 수정했습니다. service 코드의 오류가 수정되었습니다.
                status: MODIFIED
                versionInfo:
                  newVersionId: version-124
                  description: 게시글 생성 버그 수정
          schema:
            $ref: '#/components/schemas/ChatHistoryResponse'
      description: 프롬프트 채팅 기록 조회 결과
    PromptChatResponse:
      content:
        application/json:
          example:
            streamId: f99b4e6c-2c75-4868-bc05-cac827523207
          schema:
            $ref: '#/components/schemas/SSEIdResponse'
      description: 프롬프트 처리 결과
    ConnectSSEResponse:
      content:
        text/event-stream:
          example: "{value=data: {'token': '합니다'}}"
          schema:
            description: 이벤트 스트림
            example: "data: {'token': '합니다'}"
            type: string
      description: SSE 연결 성공
    UpdateComponentPositionResponse:
      content:
        application/json:
          example:
            componentId: component-123
            type: CLASS
            name: BoardController
            description: 게시판 컨트롤러 클래스
            positionX: 250.5
            positionY: 150.75
            methods:
            - methodId: method-456
              name: getAllPosts
              signature: public ResponseEntity<PageDto<PostDto>> getAllPosts(Pageable
                pageable)
              body: |-
                @GetMapping
                public ResponseEntity<PageDto<PostDto>> getAllPosts(Pageable pageable) {
                    return ResponseEntity.ok(boardService.getAllPosts(pageable));
                }
              description: 모든 게시글을 페이징하여 조회합니다.
            - methodId: method-457
              name: getPostById
              signature: public ResponseEntity<PostDto> getPostById(Long postId)
              body: |-
                @GetMapping("/{postId}")
                public ResponseEntity<PostDto> getPostById(@PathVariable Long postId) {
                    return ResponseEntity.ok(boardService.getPostById(postId));
                }
              description: 특정 ID의 게시글을 조회합니다.
          schema:
            $ref: '#/components/schemas/ComponentUpdatedResponse'
      description: 컴포넌트 위치 업데이트 성공
    SearchApiStatusResponse:
      content:
        application/json:
          example:
            content:
            - apiId: api-123
              name: 게시판 생성
              description: 게시판 생성 API
              method: POST
              endpoint: /api/v1/boards
              status: AI_VISUALIZED
            - apiId: api-124
              name: 게시판 삭제
              description: 게시판 삭제 API
              method: DELETE
              endpoint: /api/v1/boards
              status: AI_VISUALIZED
            - apiId: api-125
              name: 댓글 생성
              description: 댓글 생성 API
              method: POST
              endpoint: "/api/v1/boards/{boardId}/comments/{commentId}"
              status: AI_VISUALIZED
            listSize: 3
            isFirstPage: true
            isLastPage: true
            totalPages: 1
            totalElements: 3
          schema:
            $ref: '#/components/schemas/ApiSummaryPageResponse'
      description: API 상태가 AI_VISUALIZED 인 목록 조회 성공
    GetDiagramResponse:
      content:
        application/json:
          example:
            diagramId: diagram-123
            components:
            - componentId: component-123
              type: CLASS
              name: BoardController
              description: 게시판 컨트롤러 클래스
              positionX: 250.5
              positionY: 150.75
              methods:
              - methodId: method-456
                name: getAllPosts
                signature: public ResponseEntity<PageDto<PostDto>> getAllPosts(Pageable
                  pageable)
                body: |-
                  @GetMapping
                  public ResponseEntity<PageDto<PostDto>> getAllPosts(Pageable pageable) {
                      return ResponseEntity.ok(boardService.getAllPosts(pageable));
                  }
                description: 모든 게시글을 페이징하여 조회합니다.
              - methodId: method-457
                name: getPostById
                signature: public ResponseEntity<PostDto> getPostById(Long postId)
                body: |-
                  @GetMapping("/{postId}")
                  public ResponseEntity<PostDto> getPostById(@PathVariable Long postId) {
                      return ResponseEntity.ok(boardService.getPostById(postId));
                  }
                description: 특정 ID의 게시글을 조회합니다.
            - componentId: component-124
              type: CLASS
              name: BoardService
              description: 게시판 서비스 클래스
              positionX: 450.0
              positionY: 150.0
              methods:
              - methodId: method-458
                name: getAllPosts
                signature: public PageDto<PostDto> getAllPosts(Pageable pageable)
                body: "public PageDto<PostDto> getAllPosts(Pageable pageable) {\n\
                  \    Page<Post> postsPage = postRepository.findAll(pageable);\n\
                  \    List<PostDto> postDtos = postsPage.getContent().stream()\n\
                  \        .map(this::convertToDto)\n        .collect(Collectors.toList());\n\
                  \    \n    return new PageDto<>(postDtos, postsPage.getNumber(),\
                  \ postsPage.isFirst(), postsPage.isLast(), \n        postsPage.getTotalPages(),\
                  \ postsPage.getTotalElements());\n}"
                description: 모든 게시글을 페이징하여 조회합니다.
              - methodId: method-459
                name: getPostById
                signature: public PostDto getPostById(Long postId)
                body: |-
                  public PostDto getPostById(Long postId) {
                      Post post = postRepository.findById(postId)
                          .orElseThrow(() -> new NotFoundException("Post not found with id: " + postId));
                      return convertToDto(post);
                  }
                description: 특정 ID의 게시글을 조회합니다.
            - componentId: component-125
              type: INTERFACE
              name: PostRepository
              description: 게시글 저장소 인터페이스
              positionX: 650.0
              positionY: 150.0
              methods:
              - methodId: method-460
                name: findAll
                signature: Page<Post> findAll(Pageable pageable)
                description: 모든 게시글을 페이징하여 조회합니다.
              - methodId: method-461
                name: findById
                signature: Optional<Post> findById(Long id)
                description: ID로 게시글을 조회합니다.
            connections:
            - connectionId: connection-123
              sourceMethodId: method-456
              targetMethodId: method-458
              type: SOLID
            - connectionId: connection-124
              sourceMethodId: method-457
              targetMethodId: method-459
              type: SOLID
            - connectionId: connection-125
              sourceMethodId: method-458
              targetMethodId: method-460
              type: DOTTED
            - connectionId: connection-126
              sourceMethodId: method-459
              targetMethodId: method-461
              type: DOTTED
            dto:
            - dtoId: dto-123
              name: PostDto
              description: 게시글 DTO
              body: "public class PostDto {\n    private Long id;\n    private String\
                \ title;\n    private String content;\n    private String author;\n\
                \    private LocalDateTime createdAt;\n    private LocalDateTime updatedAt;\n\
                \    \n    // getters and setters\n}"
            - dtoId: dto-124
              name: PageDto
              description: 페이지 DTO
              body: "public class PageDto<T> {\n    private List<T> content;\n   \
                \ private int listSize;\n    private boolean isFirstPage;\n    private\
                \ boolean isLastPage;\n    private int totalPages;\n    private long\
                \ totalElements;\n    \n    // constructors, getters and setters\n\
                }"
            metadata:
              metadataId: metadata-123
              version: 2
              lastModified: 2025-04-25T10:30:45.123Z
              name: 게시판 API
              description: 게시판 서비스를 위한 CRUD API 모음
          schema:
            $ref: '#/components/schemas/DiagramResponse'
      description: 성공적으로 도식화 데이터를 조회함
    ChangeApiProcessStatusResponse:
      content:
        application/json:
          example:
            status: USER_COMPLETED
          schema:
            $ref: '#/components/schemas/ApiProcessStateUpdatedResponse'
      description: 프롬프트 처리 결과
    RuleResponse:
      content:
        application/json:
          examples:
            example1:
              $ref: '#/components/examples/RuleResponseExample'
          schema:
            $ref: '#/components/schemas/RuleResponse'
      description: 룰 목록 조회 성공
    ApiSpecListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiSpecListResponse'
      description: API 스펙 목록 조회 성공
    ApiSpecResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiSpecVersionResponse'
      description: 단일 API 스펙 조회 성공
    ApiSpecUpdateResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiSpecVersionResponse'
      description: API 스펙 수정 성공
    SuccessNoContent:
      description: 성공적으로 처리되었습니다
    ApiSpecCreatedResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiSpecVersionCreatedResponse'
      description: API 스펙 생성 성공
    ScrudProjectListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ScrudProjectPageDto'
      description: 프로젝트 목록
    ScrudProjectResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ScrudProjectDto'
      description: 프로젝트 설정
    GlobalFileListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GlobalFileListDto'
      description: 전체 전역설정 파일 목록
    GetPostListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetPostListResponse'
      description: 게시글 목록 조회 응답
    CreatePostResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatePostResponse'
      description: 게시글 생성 성공 응답
    GetPostDetailResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostDetailResponse'
      description: 게시글 상세 조회 응답
    VotePostResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VoteResponse'
      description: 게시글 추천/비추천 응답
    GetCommentListResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetCommentListResponse'
      description: 댓글 목록 조회 성공
    CreateCommentResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommentResponse'
      description: 댓글 작성 성공
    VoteCommentResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/VoteCommentResponse'
      description: 댓글 추천/비추천 성공
    UserInfoResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserResponse'
      description: 사용자 정보
  schemas:
    ExampleDto:
      example:
        exampleEnum: ONE
        exampleDate: 2000-01-23
        exampleInteger: 8
        exampleArray:
        - exampleArray
        - exampleArray
        exampleObject:
          nestedProperty: nestedProperty
        exampleString: exampleString
        exampleBoolean: true
      properties:
        exampleEnum:
          description: 예시 열거형입니다.
          enum:
          - ONE
          - TWO
          - THREE
          type: string
        exampleString:
          description: 예시 스트링 입니다.
          maxLength: 255
          type: string
        exampleInteger:
          description: 예시 정수 입니다.
          format: int32
          maximum: 100
          minimum: 0
          type: integer
        exampleBoolean:
          description: 예시 불리언 입니다.
          type: boolean
        exampleArray:
          description: 예시 배열입니다.
          items:
            type: string
          type: array
        exampleObject:
          $ref: '#/components/schemas/ExampleObject'
        exampleDate:
          description: 예시 날짜입니다.
          format: date
          type: string
      required:
      - exampleEnum
      - exampleInteger
      - exampleString
      type: object
    ExampleObject:
      description: 예시 중첩 객체입니다.
      example:
        nestedProperty: nestedProperty
      properties:
        nestedProperty:
          description: 중첩된 속성입니다.
          type: string
      type: object
    NotFoundException:
      allOf:
      - $ref: '#/components/schemas/ProblemDetail'
      - properties:
          code:
            type: string
          isSuccess:
            type: boolean
        type: object
      example:
        instance: https://openapi-generator.tech
        code: code
        detail: detail
        type: https://openapi-generator.tech
        title: title
        status: 6
        isSuccess: true
    ProblemDetail:
      properties:
        type:
          description: 문제 유형을 식별하는 URI
          format: uri
          type: string
        title:
          description: 문제에 대한 간단한 제목
          type: string
        status:
          description: HTTP 상태 코드
          type: integer
        detail:
          description: 문제에 대한 자세한 설명
          type: string
        instance:
          description: 문제가 발생한 특정 URI
          format: uri
          type: string
      type: object
    ExamplePageDto:
      allOf:
      - properties:
          content:
            items:
              $ref: '#/components/schemas/ExampleDto'
            type: array
        type: object
      - $ref: '#/components/schemas/PageDto'
      example:
        isLastPage: true
        totalPages: 6
        listSize: 0
        isFirstPage: true
        content:
        - exampleEnum: ONE
          exampleDate: 2000-01-23
          exampleInteger: 8
          exampleArray:
          - exampleArray
          - exampleArray
          exampleObject:
            nestedProperty: nestedProperty
          exampleString: exampleString
          exampleBoolean: true
        - exampleEnum: ONE
          exampleDate: 2000-01-23
          exampleInteger: 8
          exampleArray:
          - exampleArray
          - exampleArray
          exampleObject:
            nestedProperty: nestedProperty
          exampleString: exampleString
          exampleBoolean: true
        totalElements: 1
    ChatHistoryResponse:
      example:
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          chatId: chatId
          userChat:
            promptType: SIGNATURE
            targetMethods:
            - ""
            - ""
            tag: EXPLAIN
            message: message
          systemChat:
            diagramId: diagramId
            versionInfo:
              newVersionId: newVersionId
              description: description
            message: message
            systemChatId: systemChatId
            status: MODIFIED
        - createdAt: 2000-01-23T04:56:07.000+00:00
          chatId: chatId
          userChat:
            promptType: SIGNATURE
            targetMethods:
            - ""
            - ""
            tag: EXPLAIN
            message: message
          systemChat:
            diagramId: diagramId
            versionInfo:
              newVersionId: newVersionId
              description: description
            message: message
            systemChatId: systemChatId
            status: MODIFIED
      properties:
        content:
          description: 프롬프트 채팅 목록 (시간순 정렬)
          items:
            $ref: '#/components/schemas/ChatDto'
          type: array
      required:
      - content
      type: object
    ChatDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        chatId: chatId
        userChat:
          promptType: SIGNATURE
          targetMethods:
          - ""
          - ""
          tag: EXPLAIN
          message: message
        systemChat:
          diagramId: diagramId
          versionInfo:
            newVersionId: newVersionId
            description: description
          message: message
          systemChatId: systemChatId
          status: MODIFIED
      properties:
        chatId:
          description: 메시지 ID
          type: string
        createdAt:
          description: 메시지 생성 시간
          format: date-time
          type: string
        userChat:
          $ref: '#/components/schemas/UserChatDto'
        systemChat:
          $ref: '#/components/schemas/SystemChatDto'
      required:
      - createdAt
      type: object
    UserChatDto:
      description: 사용자 메시지 관련 데이터
      example:
        promptType: SIGNATURE
        targetMethods:
        - ""
        - ""
        tag: EXPLAIN
        message: message
      properties:
        tag:
          $ref: '#/components/schemas/MethodPromptTagEnumDto'
        promptType:
          $ref: '#/components/schemas/MethodPromptTargetEnumDto'
        message:
          description: 메시지 내용
          type: string
        targetMethods:
          description: 프롬프트 대상 메서드 정보
          items: {}
          type: array
      type: object
    MethodPromptTagEnumDto:
      description: 프롬프트 태그
      enum:
      - EXPLAIN
      - REFACTORING
      - OPTIMIZE
      - DOCUMENT
      - TEST
      - SECURITY
      - CONVENTION
      - ANALYZE
      - IMPLEMENT
      type: string
    MethodPromptTargetEnumDto:
      description: 프롬프트 타입
      enum:
      - SIGNATURE
      - BODY
      type: string
    SystemChatDto:
      description: 사용자가 요청한 프롬프트를 수행한 응답 메시지
      example:
        diagramId: diagramId
        versionInfo:
          newVersionId: newVersionId
          description: description
        message: message
        systemChatId: systemChatId
        status: MODIFIED
      properties:
        systemChatId:
          type: string
        status:
          $ref: '#/components/schemas/PromptResponseEnumDto'
        message:
          description: LLM이 생성한 메시지
          type: string
        versionInfo:
          $ref: '#/components/schemas/VersionInfoDto'
        diagramId:
          description: 다이어그램 식별 id
          type: string
      type: object
    PromptResponseEnumDto:
      description: 프롬프트 처리 상태
      enum:
      - MODIFIED
      - UNCHANGED
      - EXPLANATION
      - MODIFIED_WITH_NEW_COMPONENTS
      - ERROR
      type: string
    VersionInfoDto:
      description: 버전 변경 정보 (상태가 MODIFIED 또는 MODIFIED_WITH_NEW_COMPONENTS인 경우)
      example:
        newVersionId: newVersionId
        description: description
      properties:
        newVersionId:
          description: 새 버전 ID
          type: string
        description:
          description: 버전 변경 설명
          type: string
      type: object
    UserChatRequest:
      allOf:
      - $ref: '#/components/schemas/UserChatDto'
      example:
        promptType: SIGNATURE
        targetMethods:
        - ""
        - ""
        tag: EXPLAIN
        message: message
      type: object
    SSEIdResponse:
      description: SSE id
      example:
        streamId: streamId
      properties:
        streamId:
          type: string
      type: object
    ComponentPositionUpdateRequest:
      example:
        x: 0.8008282
        "y": 6.0274563
      properties:
        x:
          description: 컴포넌트의 X 좌표
          format: float
          type: number
        "y":
          description: 컴포넌트의 Y 좌표
          format: float
          type: number
      required:
      - x
      - "y"
      type: object
    ComponentUpdatedResponse:
      allOf:
      - $ref: '#/components/schemas/ComponentDto'
      example:
        positionY: 6.027456183070403
        componentId: componentId
        methods:
        - signature: signature
          name: name
          methodId: methodId
          description: description
          body: body
        - signature: signature
          name: name
          methodId: methodId
          description: description
          body: body
        name: name
        description: description
        type: CLASS
        positionX: 0.8008281904610115
      type: object
    ComponentDto:
      example:
        positionY: 6.027456183070403
        componentId: componentId
        methods:
        - signature: signature
          name: name
          methodId: methodId
          description: description
          body: body
        - signature: signature
          name: name
          methodId: methodId
          description: description
          body: body
        name: name
        description: description
        type: CLASS
        positionX: 0.8008281904610115
      properties:
        componentId:
          description: 컴포넌트 ID
          type: string
        type:
          $ref: '#/components/schemas/ComponentTypeEnumDto'
        name:
          description: 컴포넌트 이름
          type: string
        description:
          description: 컴포넌트 설명
          type: string
        positionX:
          description: X 좌표
          type: number
        positionY:
          description: Y 좌표
          type: number
        methods:
          description: 컴포넌트에 속한 메서드 목록
          items:
            $ref: '#/components/schemas/MethodDto'
          type: array
      required:
      - methods
      - name
      - type
      type: object
    ComponentTypeEnumDto:
      description: 컴포넌트 타입
      enum:
      - CLASS
      - INTERFACE
      type: string
    MethodDto:
      example:
        signature: signature
        name: name
        methodId: methodId
        description: description
        body: body
      properties:
        methodId:
          description: 메서드 ID
          type: string
        name:
          description: 메서드 이름
          type: string
        signature:
          description: 메서드 시그니처
          type: string
        body:
          description: 메서드 본문
          type: string
        description:
          description: 메서드 설명
          type: string
      required:
      - name
      - signature
      type: object
    ApiProcessStateEnumDto:
      description: API 처리 상태
      enum:
      - AI_GENERATED
      - AI_VISUALIZED
      - USER_COMPLETED
      type: string
    ApiSummaryPageResponse:
      allOf:
      - properties:
          content:
            items:
              $ref: '#/components/schemas/ApiSummaryDto'
            type: array
        type: object
      - $ref: '#/components/schemas/PageDto'
      example:
        isLastPage: true
        totalPages: 6
        listSize: 0
        isFirstPage: true
        content:
        - endpoint: endpoint
          method: method
          name: name
          description: description
          apiId: apiId
          status: AI_GENERATED
        - endpoint: endpoint
          method: method
          name: name
          description: description
          apiId: apiId
          status: AI_GENERATED
        totalElements: 1
    ApiSummaryDto:
      example:
        endpoint: endpoint
        method: method
        name: name
        description: description
        apiId: apiId
        status: AI_GENERATED
      properties:
        apiId:
          description: API의 고유 식별자
          type: string
        name:
          description: API의 이름
          type: string
        description:
          description: API에 대한 설명
          type: string
        method:
          description: API 메서드 종류
          type: string
        endpoint:
          description: API 엔드 포인트 정보
          type: string
        status:
          $ref: '#/components/schemas/ApiProcessStateEnumDto'
      type: object
    DiagramResponse:
      allOf:
      - $ref: '#/components/schemas/DiagramDto'
      example:
        components:
        - positionY: 6.027456183070403
          componentId: componentId
          methods:
          - signature: signature
            name: name
            methodId: methodId
            description: description
            body: body
          - signature: signature
            name: name
            methodId: methodId
            description: description
            body: body
          name: name
          description: description
          type: CLASS
          positionX: 0.8008281904610115
        - positionY: 6.027456183070403
          componentId: componentId
          methods:
          - signature: signature
            name: name
            methodId: methodId
            description: description
            body: body
          - signature: signature
            name: name
            methodId: methodId
            description: description
            body: body
          name: name
          description: description
          type: CLASS
          positionX: 0.8008281904610115
        metadata:
          metadataId: metadataId
          name: name
          description: description
          lastModified: 2000-01-23T04:56:07.000+00:00
          version: 1
        diagramId: diagramId
        connections:
        - targetMethodId: targetMethodId
          sourceMethodId: sourceMethodId
          connectionId: connectionId
          type: SOLID
        - targetMethodId: targetMethodId
          sourceMethodId: sourceMethodId
          connectionId: connectionId
          type: SOLID
        dto:
        - name: name
          description: description
          body: body
          dtoId: dtoId
        - name: name
          description: description
          body: body
          dtoId: dtoId
      type: object
    DiagramDto:
      properties:
        diagramId:
          description: 다이어그램 아이디
          type: string
        components:
          description: 캔버스의 컴포넌트 데이터
          items:
            $ref: '#/components/schemas/ComponentDto'
          type: array
        connections:
          description: 컴포넌트 간 연결 데이터
          items:
            $ref: '#/components/schemas/ConnectionDto'
          type: array
        dto:
          description: DTO 데이터
          items:
            $ref: '#/components/schemas/DtoModelDto'
          type: array
        metadata:
          $ref: '#/components/schemas/MetadataDto'
      type: object
    ConnectionDto:
      example:
        targetMethodId: targetMethodId
        sourceMethodId: sourceMethodId
        connectionId: connectionId
        type: SOLID
      properties:
        connectionId:
          description: 연결 ID
          type: string
        sourceMethodId:
          description: 소스 메서드 ID
          type: string
        targetMethodId:
          description: 타겟 메서드 ID
          type: string
        type:
          $ref: '#/components/schemas/MethodConnectionTypeEnumDto'
      required:
      - sourceMethodId
      - targetMethodId
      - type
      type: object
    MethodConnectionTypeEnumDto:
      description: 연결 타입 (실선 또는 점선)
      enum:
      - SOLID
      - DOTTED
      type: string
    DtoModelDto:
      example:
        name: name
        description: description
        body: body
        dtoId: dtoId
      properties:
        dtoId:
          description: DTO ID
          type: string
        name:
          description: DTO 이름
          type: string
        description:
          description: DTO 설명
          type: string
        body:
          description: DTO 전체 코드
          type: string
      required:
      - name
      type: object
    MetadataDto:
      example:
        metadataId: metadataId
        name: name
        description: description
        lastModified: 2000-01-23T04:56:07.000+00:00
        version: 1
      properties:
        metadataId:
          description: 메타 데이터 아이디
          type: string
        version:
          description: 버전 번호
          type: integer
        lastModified:
          description: 마지막 수정 일시
          format: date-time
          type: string
        name:
          description: API 이름
          type: string
        description:
          description: API 설명
          type: string
      required:
      - lastModified
      - version
      type: object
    ApiProcessStateRequest:
      example:
        status: AI_GENERATED
      properties:
        status:
          $ref: '#/components/schemas/ApiProcessStateEnumDto'
      type: object
    ApiProcessStateUpdatedResponse:
      example:
        status: AI_GENERATED
      properties:
        status:
          $ref: '#/components/schemas/ApiProcessStateEnumDto'
      type: object
    RuleResponse:
      example:
        spec_version:
          spec_version_id: 0
          open_api_version: 3.0.1
          description: description
        operation_field_rules:
        - request_rules:
          - content_type: content_type
            is_required: true
            body_type: body_type
            supports_file: true
          - content_type: content_type
            is_required: true
            body_type: body_type
            supports_file: true
          parameter_rules:
          - in_type: in_type
            supports_enum: true
            is_required: true
            supports_array: true
            data_type: data_type
            is_editable: true
          - in_type: in_type
            supports_enum: true
            is_required: true
            supports_array: true
            data_type: data_type
            is_editable: true
          operation_field_rule_id: 6
          is_editable: true
          field_name: field_name
          editable_sub_fields: editable_sub_fields
          response_rules:
          - status_code: status_code
            content_type: content_type
            description: description
            is_error: true
            schema_type: schema_type
            ref_component: ref_component
          - status_code: status_code
            content_type: content_type
            description: description
            is_error: true
            schema_type: schema_type
            ref_component: ref_component
        - request_rules:
          - content_type: content_type
            is_required: true
            body_type: body_type
            supports_file: true
          - content_type: content_type
            is_required: true
            body_type: body_type
            supports_file: true
          parameter_rules:
          - in_type: in_type
            supports_enum: true
            is_required: true
            supports_array: true
            data_type: data_type
            is_editable: true
          - in_type: in_type
            supports_enum: true
            is_required: true
            supports_array: true
            data_type: data_type
            is_editable: true
          operation_field_rule_id: 6
          is_editable: true
          field_name: field_name
          editable_sub_fields: editable_sub_fields
          response_rules:
          - status_code: status_code
            content_type: content_type
            description: description
            is_error: true
            schema_type: schema_type
            ref_component: ref_component
          - status_code: status_code
            content_type: content_type
            description: description
            is_error: true
            schema_type: schema_type
            ref_component: ref_component
        description: description
        service_spec_version_id: 1
        scrud_version: scrud_version
        status: status
      properties:
        service_spec_version_id:
          example: 1
          type: integer
        spec_version:
          $ref: '#/components/schemas/SpecVersionOut'
        scrud_version:
          type: string
        status:
          type: string
        description:
          type: string
        operation_field_rules:
          items:
            $ref: '#/components/schemas/OperationFieldRuleOut'
          type: array
      required:
      - operation_field_rules
      - scrud_version
      - service_spec_version_id
      - spec_version
      - status
      type: object
    SpecVersionOut:
      example:
        spec_version_id: 0
        open_api_version: 3.0.1
        description: description
      properties:
        spec_version_id:
          type: integer
        open_api_version:
          example: 3.0.1
          type: string
        description:
          type: string
      required:
      - open_api_version
      - spec_version_id
      type: object
    OpenApiVersion:
      example: 3.0.1
      type: string
    OperationFieldRuleOut:
      example:
        request_rules:
        - content_type: content_type
          is_required: true
          body_type: body_type
          supports_file: true
        - content_type: content_type
          is_required: true
          body_type: body_type
          supports_file: true
        parameter_rules:
        - in_type: in_type
          supports_enum: true
          is_required: true
          supports_array: true
          data_type: data_type
          is_editable: true
        - in_type: in_type
          supports_enum: true
          is_required: true
          supports_array: true
          data_type: data_type
          is_editable: true
        operation_field_rule_id: 6
        is_editable: true
        field_name: field_name
        editable_sub_fields: editable_sub_fields
        response_rules:
        - status_code: status_code
          content_type: content_type
          description: description
          is_error: true
          schema_type: schema_type
          ref_component: ref_component
        - status_code: status_code
          content_type: content_type
          description: description
          is_error: true
          schema_type: schema_type
          ref_component: ref_component
      properties:
        operation_field_rule_id:
          type: integer
        field_name:
          type: string
        is_editable:
          type: boolean
        editable_sub_fields:
          type: string
        parameter_rules:
          items:
            $ref: '#/components/schemas/ParameterRule'
          type: array
        request_rules:
          items:
            $ref: '#/components/schemas/RequestRule'
          type: array
        response_rules:
          items:
            $ref: '#/components/schemas/ResponseRule'
          type: array
      required:
      - field_name
      - is_editable
      - operation_field_rule_id
      type: object
    ParameterRule:
      example:
        in_type: in_type
        supports_enum: true
        is_required: true
        supports_array: true
        data_type: data_type
        is_editable: true
      properties:
        in_type:
          type: string
        data_type:
          type: string
        is_editable:
          type: boolean
        is_required:
          type: boolean
        supports_enum:
          type: boolean
        supports_array:
          type: boolean
      type: object
    RequestRule:
      example:
        content_type: content_type
        is_required: true
        body_type: body_type
        supports_file: true
      properties:
        is_required:
          type: boolean
        body_type:
          type: string
        content_type:
          type: string
        supports_file:
          type: boolean
      type: object
    ResponseRule:
      example:
        status_code: status_code
        content_type: content_type
        description: description
        is_error: true
        schema_type: schema_type
        ref_component: ref_component
      properties:
        is_error:
          type: boolean
        description:
          type: string
        schema_type:
          nullable: true
          type: string
        status_code:
          type: string
        content_type:
          nullable: true
          type: string
        ref_component:
          nullable: true
          type: string
      type: object
    ApiSpecListResponse:
      example:
        content:
        - summary: 예시 스펙입니다.
          description: 이 API는 예시 데이터를 처리합니다.
          apiSpecId: 10
          httpMethod: GET
          version: 1
          pathParameters: "[{\"name\": \"exampleId\", \"type\": \"string\", \"required\"\
            : true}]"
          endpoint: "/api/v1/examples/{id}"
          apiGroup: example
          queryParameters: "[{\"name\": \"id\", \"type\": \"integer\", \"required\"\
            : true}]"
          requestBody: "{\"name\":\"홍길동\"}"
          response: "{\"message\":\"성공\"}"
          apiSpecStatus: AI_GENERATED
          apiSpecVersionId: 101
        - summary: 예시 스펙입니다.
          description: 이 API는 예시 데이터를 처리합니다.
          apiSpecId: 10
          httpMethod: GET
          version: 1
          pathParameters: "[{\"name\": \"exampleId\", \"type\": \"string\", \"required\"\
            : true}]"
          endpoint: "/api/v1/examples/{id}"
          apiGroup: example
          queryParameters: "[{\"name\": \"id\", \"type\": \"integer\", \"required\"\
            : true}]"
          requestBody: "{\"name\":\"홍길동\"}"
          response: "{\"message\":\"성공\"}"
          apiSpecStatus: AI_GENERATED
          apiSpecVersionId: 101
      properties:
        content:
          items:
            $ref: '#/components/schemas/ApiSpecResponse'
          type: array
      type: object
    ApiSpecResponse:
      example:
        summary: 예시 스펙입니다.
        description: 이 API는 예시 데이터를 처리합니다.
        apiSpecId: 10
        httpMethod: GET
        version: 1
        pathParameters: "[{\"name\": \"exampleId\", \"type\": \"string\", \"required\"\
          : true}]"
        endpoint: "/api/v1/examples/{id}"
        apiGroup: example
        queryParameters: "[{\"name\": \"id\", \"type\": \"integer\", \"required\"\
          : true}]"
        requestBody: "{\"name\":\"홍길동\"}"
        response: "{\"message\":\"성공\"}"
        apiSpecStatus: AI_GENERATED
        apiSpecVersionId: 101
      properties:
        apiSpecId:
          example: 10
          format: int64
          type: integer
        apiSpecVersionId:
          example: 101
          format: int64
          type: integer
        endpoint:
          example: "/api/v1/examples/{id}"
          type: string
        apiGroup:
          example: example
          type: string
        version:
          example: 1
          type: integer
        summary:
          example: 예시 스펙입니다.
          type: string
        description:
          example: 이 API는 예시 데이터를 처리합니다.
          type: string
        apiSpecStatus:
          enum:
          - AI_GENERATED
          - AI_VISUALIZED
          - USER_COMPLETED
          example: AI_GENERATED
          type: string
        httpMethod:
          description: "HTTP 메서드 (GET, POST, PUT, PATCH, DELETE)"
          enum:
          - GET
          - POST
          - PUT
          - PATCH
          - DELETE
          type: string
        requestBody:
          example: "{\"name\":\"홍길동\"}"
          type: string
        queryParameters:
          example: "[{\"name\": \"id\", \"type\": \"integer\", \"required\": true}]"
          type: string
        pathParameters:
          example: "[{\"name\": \"exampleId\", \"type\": \"string\", \"required\"\
            : true}]"
          type: string
        response:
          example: "{\"message\":\"성공\"}"
          type: string
      type: object
    ApiSpecVersionResponse:
      example:
        summary: 예시 스펙입니다.
        pathParameters: "[{\"name\": \"exampleId\", \"type\": \"string\", \"required\"\
          : true}]"
        endpoint: "/api/v1/examples/{id}"
        apiGroup: example
        queryParameters: "[{\"name\": \"id\", \"type\": \"integer\", \"required\"\
          : true}]"
        requestBody: "{\"name\":\"홍길동\"}"
        response: "{\"message\":\"성공\"}"
        description: 이 API는 예시 데이터를 처리합니다.
        httpMethod: GET
        apiSpecVersionId: 101
        version: 1
      properties:
        apiSpecVersionId:
          example: 101
          format: int64
          type: integer
        endpoint:
          example: "/api/v1/examples/{id}"
          type: string
        apiGroup:
          example: example
          type: string
        version:
          example: 1
          type: integer
        summary:
          example: 예시 스펙입니다.
          type: string
        description:
          example: 이 API는 예시 데이터를 처리합니다.
          type: string
        httpMethod:
          description: "HTTP 메서드 (GET, POST, PUT, PATCH, DELETE)"
          enum:
          - GET
          - POST
          - PUT
          - PATCH
          - DELETE
          type: string
        requestBody:
          example: "{\"name\":\"홍길동\"}"
          type: string
        queryParameters:
          example: "[{\"name\": \"id\", \"type\": \"integer\", \"required\": true}]"
          type: string
        pathParameters:
          example: "[{\"name\": \"exampleId\", \"type\": \"string\", \"required\"\
            : true}]"
          type: string
        response:
          example: "{\"message\":\"성공\"}"
          type: string
      type: object
    ApiSpecVersionCreatedResponse:
      example:
        apiSpecVersionId: 101
      properties:
        apiSpecVersionId:
          example: 101
          format: int64
          type: integer
      type: object
    ScrudProjectPageDto:
      description: 프로젝트 목록
      example:
        pageable:
          isLastPage: true
          totalPages: 1
          listSize: 6
          isFirstPage: true
          totalElements: 5
        content:
        - serverUrl: serverUrl
          scrudProjectId: 0
          description: description
          title: title
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - serverUrl: serverUrl
          scrudProjectId: 0
          description: description
          title: title
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        content:
          items:
            $ref: '#/components/schemas/ScrudProjectDto'
          type: array
        pageable:
          $ref: '#/components/schemas/PageDto'
      required:
      - content
      - pageable
      type: object
      x-spring-paginated: true
    ScrudProjectDto:
      description: 프로젝트 기본 정보
      example:
        serverUrl: serverUrl
        scrudProjectId: 0
        description: description
        title: title
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        scrudProjectId:
          description: 프로젝트 ID
          format: int64
          type: integer
        title:
          description: 프로젝트 제목
          type: string
        description:
          description: 프로젝트 설명
          type: string
        serverUrl:
          description: serverUrl
          type: string
        updatedAt:
          description: 프로젝트 수정 날짜
          format: date-time
          type: string
      type: object
    CreateProjectRequest:
      description: 프로젝트 생성에 필요한 기본 정보 & 전역 설정
      example:
        globalFiles:
        - fileName: fileName
          globalFileId: 0
          fileType: REQUIREMENTS
          fileContent: fileContent
        - fileName: fileName
          globalFileId: 0
          fileType: REQUIREMENTS
          fileContent: fileContent
        scrudProjectDto:
          serverUrl: serverUrl
          scrudProjectId: 0
          description: description
          title: title
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        scrudProjectDto:
          $ref: '#/components/schemas/ScrudProjectDto'
        globalFiles:
          items:
            $ref: '#/components/schemas/GlobalFileDto'
          type: array
      type: object
    GlobalFileDto:
      description: 전역설정 파일 목록
      example:
        fileName: fileName
        globalFileId: 0
        fileType: REQUIREMENTS
        fileContent: fileContent
      properties:
        globalFileId:
          format: int64
          type: integer
        fileName:
          type: string
        fileType:
          $ref: '#/components/schemas/FileTypeEnumDto'
        fileContent:
          type: string
      type: object
    FileTypeEnumDto:
      enum:
      - REQUIREMENTS
      - ERD
      - UTIL
      - CONVENTION
      - CONVENTION_DEFAULT
      - DEPENDENCY
      - ERROR_CODE
      - SECURITY
      - SECURITY_DEFAULT_JWT
      - SECURITY_DEFAULT_SESSION
      - SECURITY_DEFAULT_NONE
      - ARCHITECTURE_GITHUB
      - ARCHITECTURE_DEFAULT_LAYERED_A
      - ARCHITECTURE_DEFAULT_LAYERED_B
      - ARCHITECTURE_DEFAULT_CLEAN
      - ARCHITECTURE_DEFAULT_MSA
      - ARCHITECTURE_DEFAULT_HEX
      type: string
    GlobalFileListDto:
      description: 전체 전역설정 파일 목록
      example:
        project:
          serverUrl: serverUrl
          scrudProjectId: 0
          description: description
          title: title
          updatedAt: 2000-01-23T04:56:07.000+00:00
        content:
        - fileName: fileName
          globalFileId: 0
          fileType: REQUIREMENTS
          fileContent: fileContent
        - fileName: fileName
          globalFileId: 0
          fileType: REQUIREMENTS
          fileContent: fileContent
      properties:
        project:
          $ref: '#/components/schemas/ScrudProjectDto'
        content:
          items:
            $ref: '#/components/schemas/GlobalFileDto'
          type: array
      type: object
    PostSortEnumDto:
      description: "게시글 정렬 기준 (작성일, 조회수, 좋아요 수)"
      enum:
      - createdAt
      - viewCount
      - likeCount
      type: string
    PostOrderEnumDto:
      description: 정렬 방향 (오름차순 또는 내림차순)
      enum:
      - asc
      - desc
      type: string
    SearchTypeEnumDto:
      enum:
      - title
      - content
      - title_content
      type: string
    GetPostListResponse:
      example:
        pageable:
          isLastPage: true
          totalPages: 1
          listSize: 6
          isFirstPage: true
          totalElements: 5
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          dislikeCount: 1
          likeCount: 10
          postId: 101
          viewCount: 123
          title: 게시글 제목
          category: 공지
          commentCount: 5
        - createdAt: 2000-01-23T04:56:07.000+00:00
          dislikeCount: 1
          likeCount: 10
          postId: 101
          viewCount: 123
          title: 게시글 제목
          category: 공지
          commentCount: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/PostSummaryResponse'
          type: array
        pageable:
          $ref: '#/components/schemas/PageDto'
      type: object
    PostSummaryResponse:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        dislikeCount: 1
        likeCount: 10
        postId: 101
        viewCount: 123
        title: 게시글 제목
        category: 공지
        commentCount: 5
      properties:
        postId:
          example: 101
          format: int64
          type: integer
        title:
          example: 게시글 제목
          type: string
        category:
          example: 공지
          type: string
        createdAt:
          format: date-time
          type: string
        viewCount:
          example: 123
          format: int64
          type: integer
        likeCount:
          example: 10
          format: int64
          type: integer
        dislikeCount:
          example: 1
          format: int64
          type: integer
        commentCount:
          example: 5
          format: int64
          type: integer
      type: object
    CreatePostResponse:
      example:
        postId: 101
      properties:
        postId:
          example: 101
          format: int64
          type: integer
      type: object
    PostDetailResponse:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        author:
          openAiApiKey: openAiApiKey
          profileImgUrl: https://example.com/profile.jpg
          nickname: john_doe
          userId: 550e8400-e29b-41d4-a716-446655440000
        dislikeCount: 1
        isUpdated: true
        likeCount: 10
        postId: 101
        viewCount: 123
        title: 상세 게시글 제목
        category: 공지
        content: 상세 게시글 내용입니다.
        updatedAt: 2000-01-23T04:56:07.000+00:00
        commentCount: 5
      properties:
        postId:
          example: 101
          format: int64
          type: integer
        title:
          example: 상세 게시글 제목
          type: string
        content:
          example: 상세 게시글 내용입니다.
          type: string
        category:
          example: 공지
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        viewCount:
          example: 123
          format: int64
          type: integer
        likeCount:
          example: 10
          format: int64
          type: integer
        dislikeCount:
          example: 1
          format: int64
          type: integer
        commentCount:
          example: 5
          type: integer
        isUpdated:
          example: true
          type: boolean
        author:
          $ref: '#/components/schemas/UserResponse'
      type: object
    VoteResponse:
      example:
        dislikeCount: 2
        likeCount: 12
      properties:
        likeCount:
          example: 12
          format: int64
          type: integer
        dislikeCount:
          example: 2
          format: int64
          type: integer
      type: object
    GetCommentListResponse:
      example:
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          author:
            openAiApiKey: openAiApiKey
            profileImgUrl: https://example.com/profile.jpg
            nickname: john_doe
            userId: 550e8400-e29b-41d4-a716-446655440000
          dislikeCount: 1
          commentId: 101
          parentCommentId: 12
          likeCount: 3
          isEdited: true
          postId: 5
          content: 댓글 내용입니다.
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          author:
            openAiApiKey: openAiApiKey
            profileImgUrl: https://example.com/profile.jpg
            nickname: john_doe
            userId: 550e8400-e29b-41d4-a716-446655440000
          dislikeCount: 1
          commentId: 101
          parentCommentId: 12
          likeCount: 3
          isEdited: true
          postId: 5
          content: 댓글 내용입니다.
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        content:
          items:
            $ref: '#/components/schemas/CommentResponse'
          type: array
      type: object
    CommentResponse:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        author:
          openAiApiKey: openAiApiKey
          profileImgUrl: https://example.com/profile.jpg
          nickname: john_doe
          userId: 550e8400-e29b-41d4-a716-446655440000
        dislikeCount: 1
        commentId: 101
        parentCommentId: 12
        likeCount: 3
        isEdited: true
        postId: 5
        content: 댓글 내용입니다.
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        commentId:
          example: 101
          format: int64
          type: integer
        postId:
          example: 5
          format: int64
          type: integer
        content:
          example: 댓글 내용입니다.
          type: string
        parentCommentId:
          example: 12
          format: int64
          type: integer
        likeCount:
          example: 3
          format: int64
          type: integer
        dislikeCount:
          example: 1
          format: int64
          type: integer
        isEdited:
          example: true
          type: boolean
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        author:
          $ref: '#/components/schemas/UserResponse'
      type: object
    VoteCommentResponse:
      example:
        dislikeCount: 2
        likeCount: 4
      properties:
        likeCount:
          example: 4
          format: int64
          type: integer
        dislikeCount:
          example: 2
          format: int64
          type: integer
      type: object
    UserResponse:
      example:
        openAiApiKey: openAiApiKey
        profileImgUrl: https://example.com/profile.jpg
        nickname: john_doe
        userId: 550e8400-e29b-41d4-a716-446655440000
      properties:
        userId:
          example: 550e8400-e29b-41d4-a716-446655440000
          format: uuid
          type: string
        nickname:
          example: john_doe
          type: string
        profileImgUrl:
          example: https://example.com/profile.jpg
          format: uri
          type: string
        openAiApiKey:
          type: string
      type: object
    ApiSpecVersionUpdateRequest:
      example:
        summary: 예시 스펙입니다.
        pathParameters: "{ \"id\": \"123\" }"
        endpoint: "/api/v1/examples/{id}"
        queryParameters: "{ \"page\": \"1\", \"size\": \"10\" }"
        requestBody: "{ \"name\": \"홍길동\" }"
        response: JSON 응답 예시 문자열
        scrudProjectId: 101
        description: 이 API는 예시 데이터를 처리합니다.
        httpMethod: POST
      properties:
        scrudProjectId:
          example: 101
          format: int64
          type: integer
        endpoint:
          description: API 엔드포인트 경로
          example: "/api/v1/examples/{id}"
          type: string
        summary:
          description: API에 대한 간단한 설명
          example: 예시 스펙입니다.
          type: string
        description:
          description: API 상세 설명
          example: 이 API는 예시 데이터를 처리합니다.
          type: string
        response:
          description: 응답 예시(JSON 형태의 문자열)
          example: JSON 응답 예시 문자열
          type: string
        httpMethod:
          description: HTTP 메서드
          enum:
          - GET
          - POST
          - PUT
          - PATCH
          - DELETE
          example: POST
          type: string
        requestBody:
          description: 요청 바디 (JSON 형식 문자열)
          example: "{ \"name\": \"홍길동\" }"
          format: json
          type: string
        queryParameters:
          description: 쿼리 파라미터 (JSON 형식 문자열)
          example: "{ \"page\": \"1\", \"size\": \"10\" }"
          format: json
          type: string
        pathParameters:
          description: 경로 파라미터 (JSON 형식 문자열)
          example: "{ \"id\": \"123\" }"
          format: json
          type: string
      required:
      - endpoint
      - httpMethod
      type: object
    ApiSpecVersionCreateRequest:
      example:
        summary: 예시 스펙입니다.
        pathParameters: "{ \"id\": \"123\" }"
        endpoint: "/api/v1/examples/{id}"
        queryParameters: "{ \"page\": \"1\", \"size\": \"10\" }"
        requestBody: "{ \"name\": \"홍길동\" }"
        response: JSON 응답 예시 문자열
        scrudProjectId: 101
        description: 이 API는 예시 데이터를 처리합니다.
        httpMethod: POST
      properties:
        scrudProjectId:
          example: 101
          format: int64
          type: integer
        endpoint:
          description: API 엔드포인트 경로
          example: "/api/v1/examples/{id}"
          type: string
        summary:
          description: API에 대한 간단한 설명
          example: 예시 스펙입니다.
          type: string
        description:
          description: API 상세 설명
          example: 이 API는 예시 데이터를 처리합니다.
          type: string
        response:
          description: 응답 예시(JSON 형태의 문자열)
          example: JSON 응답 예시 문자열
          type: string
        httpMethod:
          description: HTTP 메서드
          enum:
          - GET
          - POST
          - PUT
          - PATCH
          - DELETE
          example: POST
          type: string
        requestBody:
          description: 요청 바디 (JSON 형식 문자열)
          example: "{ \"name\": \"홍길동\" }"
          format: json
          type: string
        queryParameters:
          description: 쿼리 파라미터 (JSON 형식 문자열)
          example: "{ \"page\": \"1\", \"size\": \"10\" }"
          format: json
          type: string
        pathParameters:
          description: 경로 파라미터 (JSON 형식 문자열)
          example: "{ \"id\": \"123\" }"
          format: json
          type: string
      required:
      - endpoint
      - httpMethod
      type: object
    ApiSpecVersionStatusRequest:
      example:
        apiSpecStatus: AI_GENERATED
      properties:
        apiSpecStatus:
          description: "API 스펙 상태 (AI_GENERATED, AI_VISUALIZED, USER_COMPLETED)"
          enum:
          - AI_GENERATED
          - AI_VISUALIZED
          - USER_COMPLETED
          example: AI_GENERATED
          type: string
      type: object
    CreatePostRequest:
      example:
        title: 게시글 제목
        content: 게시글 내용입니다.
        categoryId: 1
      properties:
        title:
          example: 게시글 제목
          type: string
        content:
          example: 게시글 내용입니다.
          type: string
        categoryId:
          example: 1
          format: int64
          type: integer
      required:
      - categoryId
      - content
      - title
      type: object
    UpdatePostRequest:
      example:
        title: 수정된 제목
        content: 수정된 내용
      properties:
        title:
          example: 수정된 제목
          type: string
        content:
          example: 수정된 내용
          type: string
      type: object
    PostVoteRequest:
      example:
        isLike: true
      properties:
        isLike:
          description: "true면 추천, false면 비추천"
          example: true
          type: boolean
      required:
      - isLike
      type: object
    CreateCommentRequest:
      example:
        parentCommentId: 123
        content: 댓글입니다.
      properties:
        content:
          example: 댓글입니다.
          type: string
        parentCommentId:
          example: 123
          format: int64
          type: integer
      required:
      - content
      type: object
    UpdateCommentRequest:
      example:
        content: 수정된 댓글입니다.
      properties:
        content:
          example: 수정된 댓글입니다.
          type: string
      required:
      - content
      type: object
    CommentVoteRequest:
      example:
        isLike: true
      properties:
        isLike:
          description: "true면 추천, false면 비추천"
          example: true
          type: boolean
      required:
      - isLike
      type: object
    PageDto:
      example:
        isLastPage: true
        totalPages: 1
        listSize: 6
        isFirstPage: true
        totalElements: 5
      properties:
        listSize:
          description: 현재 페이지의 데이터 개수
          type: integer
        isFirstPage:
          description: 현재 페이지가 첫 번째 페이지인지 여부
          type: boolean
        isLastPage:
          description: 현재 페이지가 마지막 페이지인지 여부
          type: boolean
        totalPages:
          description: 총 페이지 수
          type: integer
        totalElements:
          description: 총 데이터 개수
          type: integer
      type: object
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      description: "JWT 인증 토큰을 사용합니다. 예: Bearer {token}"
      scheme: bearer
      type: http
