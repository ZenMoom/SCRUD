openapi: 3.0.0

info:
  title: Example API
  description: 예시 API
  version: 1.0.0
  contact:
    name: 예시 문서입니다.

servers:
  - url: http://localhost:8080
    description: 개발용 로컬 서버
  - url: http://localhost:8081
    description: 개발용 목 서버

tags:
  - name: Example
    description: 예시 관련 API
  - name: Component
    description: 컴포넌트 메서드, 클래스와 관련된 메서드
  - name: ScrudApi
    description: API 상태 수정 API
  - name: Canvas
    description: 도식화와 관련된 메서드
  - name: Chat
    description: 프롬프트 채팅 관련 API
  - name: ScrudProject
    description: 프로젝트 전역세팅 관련 API - 개발 전

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT 인증 토큰을 사용합니다. 예: Bearer {token}"

paths:
  /api/v1/examples/{exampleId}:
    get:
      tags:
        - Example
      operationId: getExampleById
      summary: "특정 ID의 예시를 조회합니다."
      description: "주어진 ID에 해당하는 예시를 조회합니다. 상세 예시 입니다."
      parameters:
        - $ref: "./components/schemas/example-schema.yaml#/ExampleId"
      responses:
        "200":
          $ref: "./components/responses/example-response.yaml#/ExampleResponse"
        "404":
          $ref: "./components/responses/exception-response.yaml#/NotFoundException"
    post:
      tags:
        - Example
      operationId: updateExampleById
      summary: 특정 ID의 예시를 업데이트합니다.
      description: 주어진 ID에 해당하는 예시를 업데이트합니다. 상세 예시 입니다.
      parameters:
        - $ref: "./components/schemas/example-schema.yaml#/ExampleId"
      requestBody:
        $ref: "./components/requests/example-request.yaml#/ExampleRequest"
      responses:
        "200":
          $ref: "./components/responses/example-response.yaml#/ExampleResponse"
        "404":
          $ref: "./components/responses/exception-response.yaml#/NotFoundException"

  /api/v1/examples:
    get:
      tags:
        - Example
      operationId: getExamplesWithPagination
      x-spring-paginated: true
      summary: "예시 목록을 페이지네이션하여 조회합니다."
      description: "예시 목록을 페이지 번호와 페이지 크기를 이용하여 페이지네이션하여 조회합니다."
      parameters:
        - $ref: "./components/schemas/page-schema.yaml#/Page"
        - $ref: "./components/schemas/page-schema.yaml#/Size"

      responses:
        "200":
          $ref: "./components/responses/example-response.yaml#/ExamplePageResponse"
        "404":
          $ref: "./components/responses/exception-response.yaml#/NotFoundException"

    post:
      tags:
        - Example
      operationId: createExampleOne
      summary: 예시를 하나 생성합니다.
      description: 예시를 하나 생성합니다. 상세 예시 입니다.
      requestBody:
        $ref: "./components/requests/example-request.yaml#/ExampleRequest"
      responses:
        "200":
          $ref: "./components/responses/example-response.yaml#/ExampleResponse"
        "404":
          $ref: "./components/responses/exception-response.yaml#/NotFoundException"

  /api/v1/projects/{projectId}/apis/{apiId}/chats:
    get:
      tags:
        - Chat
      summary: 프롬프트 채팅 기록 조회
      description: 특정 API에 대한 프롬프트 채팅 기록을 시간순으로 조회합니다.
      operationId: getPrompts
      parameters:
        - $ref: './components/schemas/canvas-schema.yaml#/ProjectId'
        - $ref: './components/schemas/canvas-schema.yaml#/ApiId'
      responses:
        '200':
          $ref: "./components/responses/canvas-response.yaml#/GetPromptsResponse"
        '404':
          $ref: './components/responses/exception-response.yaml#/NotFoundException'
    post:
      tags:
        - Chat
      summary: SSE 기반프롬프트 채팅 요청
      description: |
        프롬프트를 입력하여 도식화 수정을 요청하거나 설명을 요청합니다. 응답 값으로 SSE Id를 받습니다.
        Id 값을 /api/sse/connect/{SSEId} API에 입력하여 값을 얻을 수 있습니다.
      operationId: promptChat
      parameters:
        - $ref: './components/schemas/canvas-schema.yaml#/ProjectId'
        - $ref: './components/schemas/canvas-schema.yaml#/ApiId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/schemas/canvas-schema.yaml#/UserChatRequest'
            examples:
              "예시1":
                $ref: './components/examples/canvas-example.yaml#/UserChatRequestExample'
      responses:
        '200':
          $ref: "./components/responses/canvas-response.yaml#/PromptChatResponse"
        '404':
          $ref: "./components/responses/exception-response.yaml#/NotFoundException"
  /api/sse/connect/{SSEId}:
    get:
      tags:
        - Chat
      operationId: connectSSE
      parameters:
        - $ref: './components/schemas/canvas-schema.yaml#/SSEId'
      security:
        - bearerAuth: [ ]
      summary: 'SSE 연결을 설정합니다.'
      description: '서버와 클라이언트 간의 SSE 연결을 설정하여 실시간 이벤트 스트림을 수신할 수 있습니다.'
      responses:
        '200':
          $ref: "./components/responses/canvas-response.yaml#/ConnectSSEResponse"
        '401':
          description: '인증되지 않은 요청'
  /api/v1/projects/{projectId}/apis/{apiId}/components/{componentId}/position:
    put:
      tags:
        - Component
      operationId: updateComponentPosition
      summary: '컴포넌트의 위치를 업데이트합니다.'
      description: '도식화에서 특정 컴포넌트의 위치 좌표를 변경합니다.'
      parameters:
        - $ref: './components/schemas/canvas-schema.yaml#/ProjectId'
        - $ref: './components/schemas/canvas-schema.yaml#/ApiId'
        - $ref: './components/schemas/canvas-schema.yaml#/ComponentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components/schemas/canvas-schema.yaml#/ComponentPositionUpdateRequest'
            examples:
              example1:
                $ref: './components/examples/canvas-example.yaml#/ComponentPositionUpdateRequestExample'
      responses:
        '200':
          $ref: "./components/responses/canvas-response.yaml#/UpdateComponentPositionResponse"
        '404':
          $ref: "./components/responses/exception-response.yaml#/NotFoundException"
  /api/v1/projects/{projectId}/apis:
    get:
      tags:
        - ScrudApi
      operationId: searchApiStatus
      summary: 'API 상태(USER_COMPLETED, AI_GENERATED 등)에 대해 검색합니다.'
      description: |
        parameter에 API의 상태(AI_GENERATED 등) 을 검색할 수 있습니다. 
        수정된 날자순으로 정렬되어 출력됩니다.
      parameters:
        - $ref: './components/schemas/canvas-schema.yaml#/ProjectId'
        - $ref: './components/schemas/canvas-schema.yaml#/Include'
      responses:
        '200':
          $ref: "./components/responses/canvas-response.yaml#/SearchApiStatusResponse"
  /api/v1/projects/{projectId}/apis/{apiId}/versions/{versionId}:
    get:
      tags:
        - Canvas
      summary: 특정 버전의 도식화 데이터 조회
      description: 특정 프로젝트의 특정 API 버전에 대한 메서드 도식화 데이터를 가져옵니다.
      operationId: getDiagram
      parameters:
        - $ref: './components/schemas/canvas-schema.yaml#/ProjectId'
        - $ref: './components/schemas/canvas-schema.yaml#/ApiId'
        - $ref: './components/schemas/canvas-schema.yaml#/VersionId'
      responses:
        '200':
          $ref: "./components/responses/canvas-response.yaml#/GetDiagramResponse"
        '404':
          $ref: './components/responses/exception-response.yaml#/NotFoundException'
  /api/v1/projects/{projectId}/apis/{apiId}/status:
    put:
      tags:
        - ScrudApi
      operationId: changeApiProcessStatus
      summary: API 처리 상태를 변경합니다.
      description: API 처리 상태를 변경합니다.
      parameters:
        - $ref: './components/schemas/canvas-schema.yaml#/ProjectId'
        - $ref: './components/schemas/canvas-schema.yaml#/ApiId'
      requestBody:
        required: true
        description: 처리상태
        content:
          application/json:
            schema:
              $ref: './components/schemas/canvas-schema.yaml#/ApiProcessStateRequest'
            examples:
              example1:
                $ref: './components/examples/canvas-example.yaml#/ApiProcessStateRequestExample'
      responses:
        '200':
          $ref: "./components/responses/canvas-response.yaml#/ChangeApiProcessStatusResponse"
  /projects/{project_id}/apis/{api_id}/diagrams:
    post:
      tags:
        - Canvas
      operationId: createDiagram
      summary: API를 최초로 도식화 할 때 사용합니다.
      description: 도식화를 처음 실행할 때 사용하는 API 입니다.
      parameters:
        - $ref: './components/schemas/canvas-schema.yaml#/ProjectId'
        - $ref: './components/schemas/canvas-schema.yaml#/ApiId'
      responses:
        '200':
          $ref: "./components/responses/canvas-response.yaml#/GetDiagramResponse"

  ########################################
  # 1. 룰 조회
  ########################################
  /api/v1/rules:
    get:
      tags:
        - Rule
      summary: 사용 가능한 룰 목록 조회
      description: 입력값의 타입, 필수 여부, 제약 조건 등을 설정하는 룰 정보를 조회합니다.
      operationId: getRules
      responses:
        "200":
          $ref: "./components/responses/rule-response.yaml#/RuleResponse"

  ########################################
  # 2. API 조회
  ########################################
  /api/v1/api-specs/by-project/{scrudProjectId}:
    get:
      tags:
        - ApiSpec
      summary: Scrud 프로젝트 ID로 API 스펙 버전 목록 조회
      description: 중간 매핑을 통해 ScrudProject ID로 연결된 모든 API 스펙 버전을 조회합니다.
      operationId: getApiSpecsByScrudProjectId
      parameters:
        - name: scrudProjectId
          in: path
          required: true
          description: Scrud 프로젝트 ID
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "./components/responses/api-spec-response.yaml#/ApiSpecVersionListResponse"

  /api/v1/api-specs/{apiSpecVersionId}:
    get:
      tags:
        - ApiSpec
      summary: API 스펙 상세 조회
      description: 단일 API 스펙과 관련 필드를 조회합니다.
      operationId: getApiSpecById
      parameters:
        - name: apiSpecVersionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "./components/responses/api-spec-response.yaml#/ApiSpecResponse"

    ########################################
    # 3. API 수정
    ########################################
    put:
      tags:
        - ApiSpec
      summary: API 스펙 수정
      description: 단일 API 스펙과 필드를 전체 수정합니다.
      operationId: updateApiSpec
      parameters:
        - name: apiSpecVersionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "./components/requests/api-spec-request.yaml#/ApiSpecUpdateRequest"
      responses:
        "200":
          $ref: "./components/responses/api-spec-response.yaml#/ApiSpecUpdateResponse"

    delete:
      tags:
        - ApiSpec
      summary: API 스펙 삭제
      description: 단일 API 스펙과 관련 필드를 삭제합니다.
      operationId: deleteApiSpec
      parameters:
        - name: apiSpecVersionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "./components/responses/success-response.yaml#/SuccessNoContent"

    ########################################
    # 4. API 생성
    ########################################
  /api/v1/api-specs:
    post:
      tags:
        - ApiSpec
      summary: API 스펙 생성
      description: 새로운 API 스펙과 필드를 등록합니다.
      operationId: createApiSpec
      requestBody:
        $ref: "./components/requests/api-spec-request.yaml#/ApiSpecCreateRequest"
      responses:
        "201":
          $ref: "./components/responses/api-spec-response.yaml#/ApiSpecCreatedResponse"

  ########################################
  # 5. Project 조회
  ########################################
  /api/v1/projects:
    get:
      tags:
        - ScrudProject
      operationId: getAllProjects
      summary: "프로젝트 전체 목록 조회"
      responses:
        "200":
          $ref: "./components/responses/scrud-project-response.yaml#/ScrudProjectListResponse"
        "404":
          $ref: "./components/responses/exception-response.yaml#/NotFoundException"
      x-spring-paginated: true

    ########################################
    # 6. Project 생성
    ########################################
    post:
      tags:
        - ScrudProject
      operationId: createProject
      summary: "프로젝트 생성"
      description: "프로젝트 생성 API. 전역 파일 추가 주의사항! 아키텍처 구조도는 사용자 선택일 경우 ARCHITECTURE_DEFAULT, 깃허브 연동해서 올리는 경우엔 ARCHITECTURE_GITHUB 로 부탁해요!
            그리고 fileContent: JSON.stringify(fileContent) 이렇게 직렬화해서 보내주세요!"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "./components/schemas/scrud-project-dto.yaml#/CreateProjectRequest"
      responses:
        "201":
          description: "ProjectId 반환"
          content:
            application/json:
              schema:
                type: integer
                format: int64

    ########################################
    # 7. 프로젝트 설정 수정
    ########################################
    patch:
      tags:
        - ScrudProject
      operationId: updateScrudProject
      description: "프로젝트 제목, 설명, 서버url 수정"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "./components/schemas/scrud-project-dto.yaml#/ScrudProjectDto"
      responses:
        "200":
          $ref: "./components/responses/scrud-project-response.yaml#/ScrudProjectResponse"

  /api/v1/projects/{projectId}:
    ########################################
    # 8. 전역 파일 개별 추가
    ########################################
    put:
      tags:
        - ScrudProject
      operationId: addGlobalFile
      description: "전역 파일 추가 - 아키텍처 구조도는 사용자 선택일 경우 ARCHITECTURE_DEFAULT, 깃허브 연동해서 올리는 경우엔 ARCHITECTURE_GITHUB 로 부탁해요!
      그리고 fileContent: JSON.stringify(fileContent) 이렇게 직렬화해서 보내주세요!"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "./components/schemas/scrud-project-dto.yaml#/GlobalFileDto"
      parameters:
        - name: projectId
          in: path
          description: "프로젝트 ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "./components/responses/success-response.yaml#/SuccessNoContent"

    ########################################
    # 9. 해당 프로젝트의 전역 파일 전체 조회
    ########################################
    get:
      tags:
        - ScrudProject
      operationId: getAllGlobalFile
      parameters:
        - name: projectId
          in: path
          description: "프로젝트 ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          $ref: "./components/responses/scrud-project-response.yaml#/GlobalFileListResponse"
        "404":
          $ref: "./components/responses/exception-response.yaml#/NotFoundException"

    ########################################
    # 10. 프로젝트 삭제
    ########################################
    delete:
      tags:
        - ScrudProject
      operationId: deleteProject
      description: "프로젝트 삭제"
      parameters:
        - name: projectId
          in: path
          description: "프로젝트 ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "./components/responses/success-response.yaml#/SuccessNoContent"

  ########################################
  # 11. 전역 파일 삭제
  ########################################
  /api/v1/projects/{projectId}/{globalFileId}:
    delete:
      tags:
        - ScrudProject
      operationId: deleteGlobalFile
      description: "전역 파일 삭제"
      parameters:
        - name: projectId
          in: path
          description: "프로젝트 ID"
          required: true
          schema:
            type: integer
            format: int64
        - name: globalFileId
          in: path
          description: "전역 파일 ID"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          $ref: "./components/responses/success-response.yaml#/SuccessNoContent"
