spring:
  application:
    name: ExampleService

  ### Google OAuth ###
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_ID}
            client-secret: ${GOOGLE_SECRET}
            redirect-uri: ${SPRING_REDIRECT_URI}/oauth2/code/google
            scope:
              - profile
              - email
          github:
            client-id: ${GITHUB_ID}
            client-secret: ${GITHUB_SECRET}
            redirect-uri: ${SPRING_REDIRECT_URI}/oauth2/code/github
            scope:
              - read:user
              - user:email
              - repo
              - read:org

  config:
    import:
      - optional:file:../../infra/env/.env.development.local[.properties]
      - optional:file:../infra/env/.env.development.local[.properties]

  jackson:
    time-zone: Asia/Seoul

  jpa:
    properties:
      hibernate:
        jdbc:
          time_zone: Asia/Seoul
          batch_size: 50
        format_sql: ${SPRING_JPA_SHOW_SQL}
        dialect: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: ${SPRING_JPA_DDL_AUTO}
    defer-datasource-initialization: true

  sql:
    init:
      data-locations:
        - classpath:sql/defaultGlobalFile.sql
        - classpath:sql/defaultCategory.sql

      mode: ${SQL_INIT_MODE}

  datasource:
    url: jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE}?serverTimezone=UTC&useUniCode=yes&characterEncoding=UTF-8
    username: ${MYSQL_ROOT_USERNAME}
    password: ${MYSQL_ROOT_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      pool-name: hikari-pool
      maximum-pool-size: 50
      minimum-idle: 50
      connection-timeout: 5000
      connection-init-sql: "SELECT 1"
      idle-timeout: 600000
      max-lifetime: 1800000
      auto-commit: true

  main:
    allow-bean-definition-overriding: true

  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration

  servlet:
    multipart:
      enabled: true
      max-file-size: 200MB
      max-request-size: 200MB

jwt:
  secret-key: ${SPRING_JWT_SECRET_KEY}
  access-token:
    expiretime: ${SPRING_JWT_ACCESS_TOKEN_EXPIRE_TIME}

oauth2:
  redirectUri: ${SPRING_REDIRECT_URI}
  frontRedirectUri: ${SPRING_FRONT_REDIRECT_URI}

# GitHub API Setting
github:
  api:
    base-url: https://api.github.com

# 인증, 인가가 필요없는 api 경로와 method
security:
  all:
    # endpoint:method 구조를 가짐
    # method는 , 으로 구분하여 추가
    requestMatchers:
      - /api/v1/rules:GET
      - /api/v1/api-specs:GET, POST, PUT
      - /api/v1/posts:GET
      - /api/v1/posts/{postId}:GET
      - /api/v1/posts/**/comments:GET
      - /api/sse/connect/**:GET
      - /api/sse/stream/**:GET
      - /api/sse/status/**:GET
      - /api/sse/count:GET
      - /api/sse/test/**:GET, POST
    # test
    # - /api/v1/tests:GET, POST

# 허용할 cors 경로
cors:
  allow:
    origins:
      - http://localhost # 추후 제거하고 실제 url 주소를 넣으면 됨
      - http://localhost:3000
      - http://localhost:3001
      - http://localhost:18512
      - http://localhost:18513
      - http:/host.docker.internal
      - http:/host.docker.internal:80
      - http:/host.docker.internal:3000
      - http:/host.docker.internal:3001
      - http:/host.docker.internal:18512
      - http:/host.docker.internal:18513
      - https://scrud.co.kr
#  datasource:
#    url: jdbc:h2:mem:testdb   # ???? DB
#    driver-class-name: org.h2.Driver
#    username: sa
#    password:
#  jpa:
#    hibernate:
#      ddl-auto: create        # ??/??? ????? create ?? update ??
#    show-sql: true
#    properties:
#      hibernate:
#        format_sql: true
#  h2:
#    console:
#      enabled: true
#      path: /h2-console      # H2 ? ?? ??

webclient:
  base_url: ${WEBCLIENT_BASE_URL}